/**
 * @file: SaveUserPreferencesUseCase.kt
 * @description: UseCase –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤)
 * @dependencies: DataStore
 * @created: 2024-12-25
 */
package com.pizzanat.app.domain.usecases.user

import android.util.Log
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import kotlinx.coroutines.flow.first
import javax.inject.Inject

/**
 * UseCase –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
 */
class SaveUserPreferencesUseCase @Inject constructor(
    private val dataStore: DataStore<Preferences>
) {
    
    companion object {
        private val LAST_DELIVERY_ADDRESS_KEY = stringPreferencesKey("last_delivery_address")
        private val LAST_CUSTOMER_PHONE_KEY = stringPreferencesKey("last_customer_phone")
        private val LAST_CUSTOMER_NAME_KEY = stringPreferencesKey("last_customer_name")
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    suspend fun saveLastDeliveryAddress(address: String) {
        if (address.isNotBlank()) {
            Log.d("SaveUserPreferences", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥—Ä–µ—Å: '$address'")
            dataStore.edit { preferences ->
                preferences[LAST_DELIVERY_ADDRESS_KEY] = address
            }
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    suspend fun saveLastCustomerPhone(phone: String) {
        if (phone.isNotBlank() && phone != "+7") {
            Log.d("SaveUserPreferences", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: '$phone'")
            dataStore.edit { preferences ->
                preferences[LAST_CUSTOMER_PHONE_KEY] = phone
            }
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
     */
    suspend fun saveLastCustomerName(name: String) {
        if (name.isNotBlank()) {
            Log.d("SaveUserPreferences", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–º—è: '$name'")
            dataStore.edit { preferences ->
                preferences[LAST_CUSTOMER_NAME_KEY] = name
            }
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ)
     */
    suspend fun saveOrderData(deliveryAddress: String, customerPhone: String, customerName: String) {
        Log.d("SaveUserPreferences", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞:")
        Log.d("SaveUserPreferences", "  –ê–¥—Ä–µ—Å: '$deliveryAddress'")
        Log.d("SaveUserPreferences", "  –¢–µ–ª–µ—Ñ–æ–Ω: '$customerPhone'")
        Log.d("SaveUserPreferences", "  –ò–º—è: '$customerName'")
        
        dataStore.edit { preferences ->
            if (deliveryAddress.isNotBlank()) {
                preferences[LAST_DELIVERY_ADDRESS_KEY] = deliveryAddress
            }
            if (customerPhone.isNotBlank() && customerPhone != "+7") {
                preferences[LAST_CUSTOMER_PHONE_KEY] = customerPhone
            }
            if (customerName.isNotBlank()) {
                preferences[LAST_CUSTOMER_NAME_KEY] = customerName
            }
        }
        
        Log.d("SaveUserPreferences", "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
     */
    suspend fun getLastDeliveryAddress(): String {
        val address = dataStore.data.first()[LAST_DELIVERY_ADDRESS_KEY] ?: ""
        Log.d("SaveUserPreferences", "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥—Ä–µ—Å: '$address'")
        return address
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    suspend fun getLastCustomerPhone(): String {
        val phone = dataStore.data.first()[LAST_CUSTOMER_PHONE_KEY] ?: "+7"
        Log.d("SaveUserPreferences", "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: '$phone'")
        return phone
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
     */
    suspend fun getLastCustomerName(): String {
        val name = dataStore.data.first()[LAST_CUSTOMER_NAME_KEY] ?: ""
        Log.d("SaveUserPreferences", "üìã –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–º—è: '$name'")
        return name
    }
} 