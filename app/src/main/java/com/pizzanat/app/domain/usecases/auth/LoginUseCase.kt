/**
 * @file: LoginUseCase.kt
 * @description: Use case –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π email –∏ username
 * @dependencies: AuthRepository
 * @created: 2024-12-19
 * @updated: 2024-12-20 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ email –∏ username
 */
package com.pizzanat.app.domain.usecases.auth

import android.util.Log
import com.pizzanat.app.domain.entities.AuthResponse
import com.pizzanat.app.domain.repositories.AuthRepository
import javax.inject.Inject

class LoginUseCase @Inject constructor(
    private val authRepository: AuthRepository
) {
    
    suspend operator fun invoke(
        usernameOrEmail: String,
        password: String
    ): Result<AuthResponse> {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (usernameOrEmail.isBlank()) {
            return Result.failure(IllegalArgumentException("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"))
        }
        
        if (password.isBlank()) {
            return Result.failure(IllegalArgumentException("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"))
        }
        
        if (password.length < 6) {
            return Result.failure(IllegalArgumentException("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"))
        }
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        return try {
            Log.d("LoginUseCase", "üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $usernameOrEmail")
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - email –∏–ª–∏ username
            val isEmail = android.util.Patterns.EMAIL_ADDRESS.matcher(usernameOrEmail).matches()
            
            var result: Result<AuthResponse>
            
            if (isEmail) {
                Log.d("LoginUseCase", "üìß –û–±–Ω–∞—Ä—É–∂–µ–Ω email, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å email")
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å email
                result = authRepository.login(usernameOrEmail, password)
                
                if (!result.isSuccess) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å email, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å username –∏–∑ email
                    val extractedUsername = usernameOrEmail.substringBefore("@")
                    Log.d("LoginUseCase", "üë§ Email –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º username: $extractedUsername")
                    result = authRepository.login(extractedUsername, password)
                }
            } else {
                Log.d("LoginUseCase", "üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω username, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å username")
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ email, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ username
                result = authRepository.login(usernameOrEmail, password)
            }
            
            if (result.isSuccess) {
                val authResponse = result.getOrThrow()
                Log.d("LoginUseCase", "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${authResponse.user.username}")
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                authRepository.saveToken(authResponse.token)
                authRepository.saveUser(authResponse.user)
            } else {
                Log.e("LoginUseCase", "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.exceptionOrNull()?.message}")
            }
            
            result
        } catch (exception: Exception) {
            Log.e("LoginUseCase", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${exception.message}")
            Result.failure(exception)
        }
    }
} 