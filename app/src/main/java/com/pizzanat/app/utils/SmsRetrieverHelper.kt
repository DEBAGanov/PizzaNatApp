/**
 * @file: SmsRetrieverHelper.kt
 * @description: Helper –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è SMS –∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ SMS Retriever API
 * @dependencies: Google Play Services Auth
 * @created: 2025-01-23
 */
package com.pizzanat.app.utils

import android.app.Activity
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.util.Log
import com.google.android.gms.auth.api.phone.SmsRetriever
import com.google.android.gms.common.api.CommonStatusCodes
import com.google.android.gms.common.api.Status
import java.util.regex.Pattern
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.IntentSenderRequest

class SmsRetrieverHelper(
    private val context: Context,
    private val onSmsCodeReceived: (String) -> Unit
) {
    
    companion object {
        private const val TAG = "SmsRetrieverHelper"
        private const val SMS_CONSENT_REQUEST = 2
    }
    
    private var smsReceiver: BroadcastReceiver? = null
    private var consentReceiver: BroadcastReceiver? = null
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç SMS Retriever –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è SMS
     */
    fun startSmsRetriever() {
        Log.d(TAG, "üì± –ó–∞–ø—É—Å–∫ SMS Retriever API")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Play Services
        checkGooglePlayServices()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        startSmsRetrieverClassic()
        startSmsUserConsent()
    }
    
    /**
     * –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π SMS Retriever API
     */
    private fun startSmsRetrieverClassic() {
        Log.d(TAG, "üîÑ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ SMS Retriever...")
        
        val client = SmsRetriever.getClient(context)
        val task = client.startSmsRetriever()
        
        task.addOnSuccessListener {
            Log.d(TAG, "‚úÖ SMS Retriever –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            Log.d(TAG, "üìã –û–∂–∏–¥–∞–µ–º SMS —Å 4-–∑–Ω–∞—á–Ω—ã–º –∫–æ–¥–æ–º...")
            registerSmsReceiver()
        }
        
        task.addOnFailureListener { exception ->
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SMS Retriever", exception)
            Log.e(TAG, "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            Log.e(TAG, "   - Google Play Services –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            Log.e(TAG, "   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SMS Retriever")
            Log.e(TAG, "   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º")
        }
    }
    
    /**
     * SMS User Consent API (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
     */
    private fun startSmsUserConsent() {
        Log.d(TAG, "üîÑ –ó–∞–ø—É—Å–∫ SMS User Consent API...")
        
        val client = SmsRetriever.getClient(context)
        val task = client.startSmsUserConsent(null) // null = –ª—é–±–æ–π –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        
        task.addOnSuccessListener {
            Log.d(TAG, "‚úÖ SMS User Consent –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            registerConsentReceiver()
        }
        
        task.addOnFailureListener { exception ->
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SMS User Consent", exception)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Play Services
     */
    private fun checkGooglePlayServices() {
        try {
            val client = SmsRetriever.getClient(context)
            Log.d(TAG, "üîç Google Play Services –¥–æ—Å—Ç—É–ø–Ω—ã: ${client != null}")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Google Play Services –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", e)
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SMS Retriever
     */
    fun stopSmsRetriever() {
        Log.d(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SMS Retriever")
        unregisterSmsReceiver()
        unregisterConsentReceiver()
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç BroadcastReceiver –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS
     */
    private fun registerSmsReceiver() {
        if (smsReceiver != null) {
            Log.w(TAG, "‚ö†Ô∏è SMS Receiver —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return
        }
        
        Log.d(TAG, "üì° –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SMS Receiver...")
        
        smsReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                Log.d(TAG, "üì® –ü–æ–ª—É—á–µ–Ω Intent: ${intent?.action}")
                
                if (SmsRetriever.SMS_RETRIEVED_ACTION == intent?.action) {
                    val extras = intent.extras
                    val status = extras?.get(SmsRetriever.EXTRA_STATUS) as? Status
                    
                    Log.d(TAG, "üìä –°—Ç–∞—Ç—É—Å SMS Retriever: ${status?.statusCode}")
                    
                    when (status?.statusCode) {
                        CommonStatusCodes.SUCCESS -> {
                            val message = extras[SmsRetriever.EXTRA_SMS_MESSAGE] as? String
                            Log.d(TAG, "üì® SMS –ø–æ–ª—É—á–µ–Ω–æ: $message")
                            
                            message?.let { sms ->
                                val code = extractSmsCode(sms)
                                if (code != null) {
                                    Log.d(TAG, "üî¢ –ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥: $code")
                                    onSmsCodeReceived(code)
                                } else {
                                    Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ SMS: $sms")
                                    // –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                                    val aggressiveCode = extractSmsCodeAggressive(sms)
                                    if (aggressiveCode != null) {
                                        Log.d(TAG, "üîç –ù–∞–π–¥–µ–Ω –∫–æ–¥ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: $aggressiveCode")
                                        onSmsCodeReceived(aggressiveCode)
                                    }
                                }
                            }
                        }
                        CommonStatusCodes.TIMEOUT -> {
                            Log.w(TAG, "‚è∞ SMS Retriever timeout (5 –º–∏–Ω—É—Ç)")
                        }
                        else -> {
                            Log.w(TAG, "‚ö†Ô∏è SMS Retriever –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${status?.statusCode}")
                        }
                    }
                } else {
                    Log.d(TAG, "üì≠ –ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π Intent: ${intent?.action}")
                }
            }
        }
        
        val intentFilter = IntentFilter(SmsRetriever.SMS_RETRIEVED_ACTION)
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
            context.registerReceiver(smsReceiver, intentFilter, Context.RECEIVER_EXPORTED)
            Log.d(TAG, "üì± SMS Receiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (Android 13+)")
        } else {
            @Suppress("UnspecifiedRegisterReceiverFlag")
            context.registerReceiver(smsReceiver, intentFilter)
            Log.d(TAG, "üì± SMS Receiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (Android <13)")
        }
    }
    
    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç BroadcastReceiver
     */
    private fun unregisterSmsReceiver() {
        smsReceiver?.let { receiver ->
            try {
                context.unregisterReceiver(receiver)
                Log.d(TAG, "üì¥ SMS Receiver –æ—Ç–∫–ª—é—á–µ–Ω")
            } catch (e: Exception) {
                Log.w(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ SMS Receiver", e)
            }
            smsReceiver = null
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ SMS —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫)
     */
    private fun extractSmsCode(smsMessage: String): String? {
        Log.d(TAG, "üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: $smsMessage")
        
        // –ò—â–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        val patterns = listOf(
            "\\b\\d{4}\\b",           // 4 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥
            "–∫–æ–¥:?\\s*(\\d{4})",     // "–∫–æ–¥: 1234" –∏–ª–∏ "–∫–æ–¥:1234"
            "code:?\\s*(\\d{4})",    // "code: 1234" –∏–ª–∏ "code:1234"
            "(\\d{4})\\s*-\\s*–∫–æ–¥",  // "1234 - –∫–æ–¥"
            "\\D(\\d{4})\\D"         // 4 —Ü–∏—Ñ—Ä—ã –º–µ–∂–¥—É –Ω–µ-—Ü–∏—Ñ—Ä–∞–º–∏
        )
        
        for (patternStr in patterns) {
            val pattern = Pattern.compile(patternStr, Pattern.CASE_INSENSITIVE)
            val matcher = pattern.matcher(smsMessage)
            
            if (matcher.find()) {
                val code = if (matcher.groupCount() > 0) {
                    matcher.group(1) // –ì—Ä—É–ø–ø–∞ –∏–∑ —Å–∫–æ–±–æ–∫
                } else {
                    matcher.group(0) // –í—Å—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥ - —ç—Ç–æ 4 —Ü–∏—Ñ—Ä—ã
                if (code?.matches("\\d{4}".toRegex()) == true) {
                    Log.d(TAG, "‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: $code")
                    return code
                }
            }
        }
        
        return null
    }
    
    /**
     * –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–¥–∞ (–≤—Å–µ 4-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞)
     */
    private fun extractSmsCodeAggressive(smsMessage: String): String? {
        Log.d(TAG, "üîç –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö 4-–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª...")
        
        val pattern = Pattern.compile("\\d{4}")
        val matcher = pattern.matcher(smsMessage)
        
        val foundCodes = mutableListOf<String>()
        while (matcher.find()) {
            foundCodes.add(matcher.group())
        }
        
        Log.d(TAG, "üìã –ù–∞–π–¥–µ–Ω–æ 4-–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª: $foundCodes")
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        return foundCodes.firstOrNull()?.also {
            Log.d(TAG, "‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –∫–æ–¥: $it")
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç BroadcastReceiver –¥–ª—è SMS User Consent
     */
    private fun registerConsentReceiver() {
        if (consentReceiver != null) {
            Log.w(TAG, "‚ö†Ô∏è Consent Receiver —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return
        }
        
        Log.d(TAG, "üì° –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Consent Receiver...")
        
        consentReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                Log.d(TAG, "üì® –ü–æ–ª—É—á–µ–Ω Consent Intent: ${intent?.action}")
                
                if (SmsRetriever.SMS_RETRIEVED_ACTION == intent?.action) {
                    val extras = intent.extras
                    val smsMessage = extras?.getString(SmsRetriever.EXTRA_SMS_MESSAGE)
                    val status = extras?.get(SmsRetriever.EXTRA_STATUS) as? Status
                    
                    Log.d(TAG, "üìä Consent —Å—Ç–∞—Ç—É—Å: ${status?.statusCode}")
                    Log.d(TAG, "üì® Consent SMS: $smsMessage")
                    
                    when (status?.statusCode) {
                        CommonStatusCodes.SUCCESS -> {
                            smsMessage?.let { sms ->
                                val code = extractSmsCode(sms) ?: extractSmsCodeAggressive(sms)
                                code?.let {
                                    Log.d(TAG, "üéâ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ User Consent: $it")
                                    onSmsCodeReceived(it)
                                }
                            }
                        }
                        CommonStatusCodes.TIMEOUT -> {
                            Log.w(TAG, "‚è∞ SMS User Consent timeout")
                        }
                        else -> {
                            Log.w(TAG, "‚ö†Ô∏è SMS User Consent –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${status?.statusCode}")
                        }
                    }
                }
            }
        }
        
        val intentFilter = IntentFilter(SmsRetriever.SMS_RETRIEVED_ACTION)
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
            context.registerReceiver(consentReceiver, intentFilter, Context.RECEIVER_EXPORTED)
            Log.d(TAG, "üì± Consent Receiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (Android 13+)")
        } else {
            @Suppress("UnspecifiedRegisterReceiverFlag")
            context.registerReceiver(consentReceiver, intentFilter)
            Log.d(TAG, "üì± Consent Receiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (Android <13)")
        }
    }
    
    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç Consent BroadcastReceiver
     */
    private fun unregisterConsentReceiver() {
        consentReceiver?.let { receiver ->
            try {
                context.unregisterReceiver(receiver)
                Log.d(TAG, "üì¥ Consent Receiver –æ—Ç–∫–ª—é—á–µ–Ω")
            } catch (e: Exception) {
                Log.w(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Consent Receiver", e)
            }
            consentReceiver = null
        }
    }
} 