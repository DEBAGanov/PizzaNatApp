/**
 * @file: SharedOrderViewModel.kt  
 * @description: –û–±—â–∏–π ViewModel –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
 * @dependencies: Hilt, ViewModel
 * @created: 2024-12-25
 */
package com.pizzanat.app.presentation.order

import androidx.lifecycle.ViewModel
import com.pizzanat.app.domain.entities.Order
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import javax.inject.Singleton

@Singleton 
class SharedOrderStorage @Inject constructor() {
    private var lastCreatedOrder: Order? = null
    
    fun saveOrder(order: Order) {
        android.util.Log.d("SharedOrderStorage", "üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ #${order.id} —Å ${order.items.size} —Ç–æ–≤–∞—Ä–∞–º–∏")
        android.util.Log.d("SharedOrderStorage", "  –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${order.totalAmount}")
        android.util.Log.d("SharedOrderStorage", "  –î–æ—Å—Ç–∞–≤–∫–∞: ${order.deliveryCost}")
        android.util.Log.d("SharedOrderStorage", "  –ò–¢–û–ì–û: ${order.grandTotal}")
        lastCreatedOrder = order
    }
    
    fun getOrder(orderId: Long): Order? {
        val order = lastCreatedOrder
        android.util.Log.d("SharedOrderStorage", "üìã –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–∞ #$orderId")
        android.util.Log.d("SharedOrderStorage", "  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: ${if (order != null) "#${order.id}" else "–Ω–µ—Ç"}")
        
        return if (order?.id == orderId) {
            android.util.Log.d("SharedOrderStorage", "‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
            order
        } else {
            android.util.Log.d("SharedOrderStorage", "‚ùå ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null")
            null
        }
    }
    
    fun clearOrder() {
        android.util.Log.d("SharedOrderStorage", "üóëÔ∏è –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
        lastCreatedOrder = null
    }
} 