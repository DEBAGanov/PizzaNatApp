/**
 * @file: AdminOrdersViewModel.kt
 * @description: ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * @dependencies: GetAllOrdersUseCase, UpdateOrderStatusUseCase
 * @created: 2024-12-19
 */
package com.pizzanat.app.presentation.admin.orders

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.entities.Order
import com.pizzanat.app.domain.entities.OrderStatus
import com.pizzanat.app.domain.usecases.admin.GetAllOrdersUseCase
import com.pizzanat.app.domain.usecases.admin.UpdateOrderStatusUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class AdminOrdersUiState(
    val isLoading: Boolean = false,
    val orders: List<Order> = emptyList(),
    val filteredOrders: List<Order> = emptyList(),
    val error: String? = null,
    val selectedStatusFilter: OrderStatus? = null,
    val searchQuery: String = "",
    val isRefreshing: Boolean = false,
    val updatingOrderId: Long? = null,
    val testApiSuccess: String? = null // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
)

@HiltViewModel
class AdminOrdersViewModel @Inject constructor(
    private val getAllOrdersUseCase: GetAllOrdersUseCase,
    private val updateOrderStatusUseCase: UpdateOrderStatusUseCase
) : ViewModel() {
    
    private val _uiState = MutableStateFlow(AdminOrdersUiState())
    val uiState: StateFlow<AdminOrdersUiState> = _uiState.asStateFlow()
    
    private var autoRefreshJob: Job? = null
    
    init {
        loadOrders()
        startAutoRefresh()
    }
    
    fun loadOrders() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isLoading = true,
                error = null
            )
            
            try {
                Log.d("AdminOrdersViewModel", "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
                val result = getAllOrdersUseCase()
                
                if (result.isSuccess) {
                    val orders = result.getOrNull() ?: emptyList()
                    Log.d("AdminOrdersViewModel", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞: ${orders.size}")
                    orders.forEach { order ->
                        Log.d("AdminOrdersViewModel", "–ê–¥–º–∏–Ω –∑–∞–∫–∞–∑: ID=${order.id}, –∫–ª–∏–µ–Ω—Ç=${order.customerName}, —Å—Ç–∞—Ç—É—Å=${order.status}, —Å—É–º–º–∞=${order.totalAmount}")
                    }
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        orders = orders,
                        error = null
                    )
                    applyFilters()
                } else {
                    val errorMsg = result.exceptionOrNull()?.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤"
                    Log.e("AdminOrdersViewModel", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: $errorMsg")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = errorMsg
                    )
                }
            } catch (e: Exception) {
                Log.e("AdminOrdersViewModel", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                )
            }
        }
    }
    
    fun refreshOrders() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isRefreshing = true)
            
            try {
                Log.d("AdminOrdersViewModel", "–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
                val result = getAllOrdersUseCase()
                
                if (result.isSuccess) {
                    val orders = result.getOrNull() ?: emptyList()
                    Log.d("AdminOrdersViewModel", "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.size}")
                    _uiState.value = _uiState.value.copy(
                        orders = orders,
                        isRefreshing = false,
                        error = null
                    )
                    applyFilters()
                } else {
                    _uiState.value = _uiState.value.copy(
                        isRefreshing = false,
                        error = result.exceptionOrNull()?.message ?: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
                    )
                }
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    isRefreshing = false,
                    error = e.message ?: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
                )
            }
        }
    }
    
    fun updateOrderStatus(orderId: Long, newStatus: OrderStatus) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(updatingOrderId = orderId)
            
            try {
                Log.d("AdminOrdersViewModel", "–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ $orderId –Ω–∞ $newStatus")
                val result = updateOrderStatusUseCase(orderId, newStatus)
                
                if (result.isSuccess) {
                    Log.d("AdminOrdersViewModel", "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ $orderId —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
                    val updatedOrders = _uiState.value.orders.map { order ->
                        if (order.id == orderId) {
                            order.copy(status = newStatus)
                        } else {
                            order
                        }
                    }
                    
                    _uiState.value = _uiState.value.copy(
                        orders = updatedOrders,
                        updatingOrderId = null,
                        error = null
                    )
                    applyFilters()
                } else {
                    val errorMsg = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${result.exceptionOrNull()?.message}"
                    Log.e("AdminOrdersViewModel", "‚ùå $errorMsg")
                    _uiState.value = _uiState.value.copy(
                        updatingOrderId = null,
                        error = errorMsg
                    )
                }
            } catch (e: Exception) {
                Log.e("AdminOrdersViewModel", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    updatingOrderId = null,
                    error = "–û—à–∏–±–∫–∞: ${e.message}"
                )
            }
        }
    }
    
    /**
     * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
     */
    fun testApiOrders() {
        viewModelScope.launch {
            try {
                Log.d("AdminOrdersViewModel", "üß™ –¢–ï–°–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
                val result = getAllOrdersUseCase()
                
                if (result.isSuccess) {
                    val orders = result.getOrNull() ?: emptyList()
                    Log.d("AdminOrdersViewModel", "üß™ –¢–ï–°–¢ API —É—Å–ø–µ—à–µ–Ω: ${orders.size} –∑–∞–∫–∞–∑–æ–≤")
                    
                    _uiState.value = _uiState.value.copy(
                        testApiSuccess = "API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.size} –∑–∞–∫–∞–∑–æ–≤",
                        orders = orders,
                        error = null
                    )
                    applyFilters()
                } else {
                    val errorMsg = result.exceptionOrNull()?.message ?: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    Log.e("AdminOrdersViewModel", "üß™ –¢–ï–°–¢ API –Ω–µ—É–¥–∞—á–µ–Ω: $errorMsg")
                    _uiState.value = _uiState.value.copy(
                        testApiSuccess = null,
                        error = "–¢–µ—Å—Ç API: $errorMsg"
                    )
                }
            } catch (e: Exception) {
                Log.e("AdminOrdersViewModel", "üß™ –¢–ï–°–¢ API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    testApiSuccess = null,
                    error = "–¢–µ—Å—Ç API: ${e.message}"
                )
            }
            
            // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            delay(3000)
            _uiState.value = _uiState.value.copy(testApiSuccess = null)
        }
    }
    
    fun filterByStatus(status: OrderStatus?) {
        _uiState.value = _uiState.value.copy(selectedStatusFilter = status)
        applyFilters()
    }
    
    fun searchOrders(query: String) {
        _uiState.value = _uiState.value.copy(searchQuery = query)
        applyFilters()
    }
    
    private fun applyFilters() {
        val currentState = _uiState.value
        var filteredOrders = currentState.orders
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        currentState.selectedStatusFilter?.let { status ->
            filteredOrders = filteredOrders.filter { it.status == status }
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ ID –∑–∞–∫–∞–∑–∞
        if (currentState.searchQuery.isNotBlank()) {
            val query = currentState.searchQuery.lowercase()
            filteredOrders = filteredOrders.filter { order ->
                order.customerName.lowercase().contains(query) ||
                order.customerPhone.contains(query) ||
                order.id.toString().contains(query) ||
                order.deliveryAddress.lowercase().contains(query)
            }
        }
        
        _uiState.value = currentState.copy(filteredOrders = filteredOrders)
    }
    
    private fun startAutoRefresh() {
        autoRefreshJob?.cancel()
        autoRefreshJob = viewModelScope.launch {
            delay(30_000) // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            
            while (true) {
                if (!_uiState.value.isLoading && _uiState.value.updatingOrderId == null) {
                    refreshOrders()
                }
                delay(15_000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
            }
        }
    }
    
    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }
    
    fun getOrderStatusDisplayName(status: OrderStatus): String {
        return when (status) {
            OrderStatus.PENDING -> "–û–∂–∏–¥–∞–µ—Ç"
            OrderStatus.CONFIRMED -> "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            OrderStatus.PREPARING -> "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
            OrderStatus.READY -> "–ì–æ—Ç–æ–≤"
            OrderStatus.DELIVERING -> "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"
            OrderStatus.DELIVERED -> "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            OrderStatus.CANCELLED -> "–û—Ç–º–µ–Ω–µ–Ω"
        }
    }
    
    fun getOrderStatusColor(status: OrderStatus): androidx.compose.ui.graphics.Color {
        return when (status) {
            OrderStatus.PENDING -> androidx.compose.ui.graphics.Color(0xFFFFA726)
            OrderStatus.CONFIRMED -> androidx.compose.ui.graphics.Color(0xFF42A5F5)
            OrderStatus.PREPARING -> androidx.compose.ui.graphics.Color(0xFF7E57C2)
            OrderStatus.READY -> androidx.compose.ui.graphics.Color(0xFF4CAF50)
            OrderStatus.DELIVERING -> androidx.compose.ui.graphics.Color(0xFF26C6DA)
            OrderStatus.DELIVERED -> androidx.compose.ui.graphics.Color(0xFF66BB6A)
            OrderStatus.CANCELLED -> androidx.compose.ui.graphics.Color(0xFFEF5350)
        }
    }
    
    override fun onCleared() {
        super.onCleared()
        autoRefreshJob?.cancel()
    }
} 