/**
 * @file: SplashViewModel.kt
 * @description: ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @dependencies: Hilt, AuthRepository, TokenManager
 * @created: 2024-12-20
 */
package com.pizzanat.app.presentation.splash

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.repositories.AuthRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class SplashUiState(
    val isCheckingAuth: Boolean = false,
    val isAuthenticated: Boolean = false,
    val authCheckCompleted: Boolean = false,
    val error: String? = null
)

@HiltViewModel
class SplashViewModel @Inject constructor(
    private val authRepository: AuthRepository
) : ViewModel() {
    
    private val _uiState = MutableStateFlow(SplashUiState())
    val uiState: StateFlow<SplashUiState> = _uiState.asStateFlow()
    
    init {
        checkAuthenticationStatus()
    }
    
    private fun checkAuthenticationStatus() {
        viewModelScope.launch {
            try {
                Log.d("SplashViewModel", "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                
                _uiState.value = _uiState.value.copy(
                    isCheckingAuth = true,
                    error = null
                )
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ splash screen
                delay(1500)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                val hasValidToken = authRepository.isTokenValid()
                val currentUser = authRepository.getCurrentUser()
                
                Log.d("SplashViewModel", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                Log.d("SplashViewModel", "   - –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: $hasValidToken")
                Log.d("SplashViewModel", "   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUser?.username ?: "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}")
                
                val isAuthenticated = hasValidToken && currentUser != null
                
                _uiState.value = _uiState.value.copy(
                    isCheckingAuth = false,
                    isAuthenticated = isAuthenticated,
                    authCheckCompleted = true
                )
                
                if (isAuthenticated) {
                    Log.d("SplashViewModel", "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
                } else {
                    Log.d("SplashViewModel", "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ö–æ–¥—É")
                    // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (!hasValidToken) {
                        authRepository.clearToken()
                    }
                }
                
            } catch (e: Exception) {
                Log.e("SplashViewModel", "üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}", e)
                
                _uiState.value = _uiState.value.copy(
                    isCheckingAuth = false,
                    isAuthenticated = false,
                    authCheckCompleted = true,
                    error = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"
                )
            }
        }
    }
    
    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫)
     */
    fun retryAuthCheck() {
        _uiState.value = SplashUiState()
        checkAuthenticationStatus()
    }
} 