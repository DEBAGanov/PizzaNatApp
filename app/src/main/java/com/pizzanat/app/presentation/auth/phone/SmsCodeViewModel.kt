/**
 * @file: SmsCodeViewModel.kt
 * @description: ViewModel –¥–ª—è –≤–≤–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS –∫–æ–¥–∞
 * @dependencies: Hilt, ViewModel, StateFlow, SMS Use Cases
 * @created: 2024-12-20
 * @updated: 2025-01-23 - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
package com.pizzanat.app.presentation.auth.phone

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.usecases.auth.SendSmsCodeUseCase
import com.pizzanat.app.domain.usecases.auth.VerifySmsCodeUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay
import javax.inject.Inject

data class SmsCodeUiState(
    val phoneNumber: String = "",
    val smsCode: String = "",
    val codeError: String? = null,
    val isLoading: Boolean = false,
    val error: String? = null,
    val isAuthSuccessful: Boolean = false,
    val resendCountdown: Int = 0
)

@HiltViewModel
class SmsCodeViewModel @Inject constructor(
    private val verifySmsCodeUseCase: VerifySmsCodeUseCase,
    private val sendSmsCodeUseCase: SendSmsCodeUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(SmsCodeUiState())
    val uiState: StateFlow<SmsCodeUiState> = _uiState.asStateFlow()

    companion object {
        private const val TAG = "SmsCodeViewModel"
        private const val RESEND_COUNTDOWN_SECONDS = 60
    }

    init {
        startResendCountdown()
    }

    fun setPhoneNumber(phoneNumber: String) {
        _uiState.value = _uiState.value.copy(phoneNumber = phoneNumber)
    }

    fun onSmsCodeChanged(smsCode: String) {
        _uiState.value = _uiState.value.copy(
            smsCode = smsCode,
            codeError = null,
            error = null
        )
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 4 —Ü–∏—Ñ—Ä
        if (smsCode.length == 4) {
            verifySmsCode()
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SMS –∫–æ–¥–∞ (–¥–ª—è SMS Retriever API)
     */
    fun onSmsCodeAutoFilled(smsCode: String) {
        Log.d(TAG, "üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SMS –∫–æ–¥–∞: $smsCode")
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥
        if (smsCode.matches("\\d{4}".toRegex())) {
            _uiState.value = _uiState.value.copy(
                smsCode = smsCode,
                codeError = null,
                error = null
            )
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            verifySmsCode()
        } else {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–¥: $smsCode")
        }
    }

    fun verifySmsCode() {
        val currentState = _uiState.value
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è SMS –∫–æ–¥–∞
        val codeError = validateSmsCode(currentState.smsCode)
        if (codeError != null) {
            _uiState.value = currentState.copy(codeError = codeError)
            return
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞
        performVerifySmsCode(currentState.phoneNumber, currentState.smsCode)
    }

    private fun performVerifySmsCode(phoneNumber: String, smsCode: String) {
        viewModelScope.launch {
            Log.d(TAG, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SMS –∫–æ–¥–∞:")
            Log.d(TAG, "  üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: $phoneNumber")
            Log.d(TAG, "  üî¢ SMS –∫–æ–¥: $smsCode")
            
            _uiState.value = _uiState.value.copy(
                isLoading = true,
                error = null,
                codeError = null
            )

            try {
                val result = verifySmsCodeUseCase(phoneNumber, smsCode)
                
                Log.d(TAG, "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                Log.d(TAG, "  ‚úÖ Success: ${result.isSuccess}")
                
                if (result.isSuccess) {
                    val response = result.getOrThrow()
                    
                    Log.d(TAG, "üìä –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:")
                    Log.d(TAG, "  üéØ success: ${response.success}")
                    Log.d(TAG, "  üë§ authResponse: ${response.authResponse != null}")
                    Log.d(TAG, "  üí¨ message: ${response.message}")
                    Log.d(TAG, "  ‚ùå error: ${response.error}")
                    
                    if (response.authResponse != null) {
                        Log.d(TAG, "üîë –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                        Log.d(TAG, "  üé´ Token: ${response.authResponse.token.take(20)}...")
                        Log.d(TAG, "  üë§ User ID: ${response.authResponse.user.id}")
                        Log.d(TAG, "  üìß Username: ${response.authResponse.user.username}")
                    }
                    
                    if (response.success && response.authResponse != null) {
                        Log.d(TAG, "üéâ –£–°–ü–ï–®–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isAuthSuccessful = true")
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            isAuthSuccessful = true,
                            error = null
                        )
                        Log.d(TAG, "‚úÖ UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, isAuthSuccessful = ${_uiState.value.isAuthSuccessful}")
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞")
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            codeError = response.message ?: response.error ?: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                            smsCode = "" // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        )
                    }
                } else {
                    val exception = result.exceptionOrNull()
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: ${exception?.message}")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        codeError = exception?.message ?: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞",
                        smsCode = "" // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    )
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞", e)
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞"
                )
            }
        }
    }

    fun resendSmsCode() {
        val currentState = _uiState.value
        
        if (currentState.resendCountdown > 0) {
            return // –ï—â–µ —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        }

        performResendSmsCode(currentState.phoneNumber)
    }

    private fun performResendSmsCode(phoneNumber: String) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isLoading = true,
                error = null
            )

            try {
                val result = sendSmsCodeUseCase(phoneNumber)
                
                if (result.isSuccess) {
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = null,
                        smsCode = "" // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    )
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ
                    startResendCountdown()
                } else {
                    val exception = result.exceptionOrNull()
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = exception?.message ?: "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"
                    )
                }
                
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"
                )
            }
        }
    }

    private fun startResendCountdown() {
        viewModelScope.launch {
            for (countdown in RESEND_COUNTDOWN_SECONDS downTo 0) {
                _uiState.value = _uiState.value.copy(resendCountdown = countdown)
                delay(1000)
            }
        }
    }

    private fun validateSmsCode(smsCode: String): String? {
        return when {
            smsCode.isBlank() -> "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS"
            smsCode.length != 4 -> "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã"
            !smsCode.all { it.isDigit() } -> "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
            else -> null
        }
    }

    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null, codeError = null)
    }
} 