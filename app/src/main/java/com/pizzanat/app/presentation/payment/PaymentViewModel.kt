/**
 * @file: PaymentViewModel.kt
 * @description: ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏
 * @dependencies: Hilt, ViewModel, Coroutines
 * @created: 2024-12-19
 */
package com.pizzanat.app.presentation.payment

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.entities.CreatePaymentRequest
import com.pizzanat.app.domain.entities.DeliveryEstimate
import com.pizzanat.app.domain.entities.DeliveryMethod
import com.pizzanat.app.domain.entities.Order
import com.pizzanat.app.domain.entities.OrderItem
import com.pizzanat.app.domain.entities.OrderStatus
import com.pizzanat.app.domain.entities.PaymentMethod
import com.pizzanat.app.domain.repositories.AuthRepository
import com.pizzanat.app.domain.usecases.address.GetDeliveryEstimateWithAmountUseCase
import com.pizzanat.app.domain.usecases.order.CreateOrderUseCase
import com.pizzanat.app.domain.usecases.order.GetUserOrdersUseCase
import com.pizzanat.app.domain.usecases.payment.CreatePaymentUseCase
import com.pizzanat.app.presentation.checkout.OrderData
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject
import java.time.LocalDateTime

data class PaymentUiState(
    val selectedPaymentMethod: PaymentMethod = PaymentMethod.SBP,
    val selectedDeliveryMethod: DeliveryMethod = DeliveryMethod.DELIVERY,
    val subtotal: Double = 0.0,
    val deliveryCost: Double = DeliveryMethod.DELIVERY.cost,
    val total: Double = 0.0,
    val isCreatingOrder: Boolean = false,
    val orderCreated: Boolean = false,
    val createdOrderId: Long? = null,
    val createdOrder: Order? = null,
    val paymentUrl: String? = null,
    val needsPayment: Boolean = false,
    val error: String? = null,
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    val deliveryEstimate: DeliveryEstimate? = null,
    val isCalculatingDelivery: Boolean = false,
    val deliveryCalculationError: String? = null
)

@HiltViewModel
class PaymentViewModel @Inject constructor(
    private val createOrderUseCase: CreateOrderUseCase,
    private val getUserOrdersUseCase: GetUserOrdersUseCase,
    private val createPaymentUseCase: CreatePaymentUseCase,
    private val authRepository: AuthRepository,
    private val getDeliveryEstimateWithAmountUseCase: GetDeliveryEstimateWithAmountUseCase,
    private val sharedOrderStorage: com.pizzanat.app.presentation.order.SharedOrderStorage
) : ViewModel() {
    
    private val _uiState = MutableStateFlow(PaymentUiState())
    val uiState: StateFlow<PaymentUiState> = _uiState.asStateFlow()
    
    private var orderData: OrderData? = null
    
    fun setOrderTotal(amount: Double) {
        viewModelScope.launch {
            val currentState = _uiState.value
            _uiState.value = currentState.copy(
                subtotal = amount,
                total = amount + currentState.deliveryCost
            )
        }
    }
    
    fun setOrderData(data: OrderData) {
        Log.d("PaymentViewModel", "–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: ${data.cartItems.size} —Ç–æ–≤–∞—Ä–æ–≤, –∞–¥—Ä–µ—Å: ${data.deliveryAddress}")
        orderData = data
        setOrderTotal(data.totalPrice)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (data.deliveryAddress.isNotBlank()) {
            calculateDeliveryCost(data.deliveryAddress, data.totalPrice)
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
     */
    private fun calculateDeliveryCost(address: String, orderAmount: Double) {
        Log.d("PaymentViewModel", "üöö –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: '$address', —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: $orderAmount ‚ÇΩ")
        
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isCalculatingDelivery = true,
                deliveryCalculationError = null
            )
            
            getDeliveryEstimateWithAmountUseCase(address, orderAmount)
                .onSuccess { estimate ->
                    Log.d("PaymentViewModel", "‚úÖ –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:")
                    Log.d("PaymentViewModel", "  –ó–æ–Ω–∞: ${estimate.zoneName}")
                    Log.d("PaymentViewModel", "  –°—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate.deliveryCost} ‚ÇΩ")
                    Log.d("PaymentViewModel", "  –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è: ${estimate.isDeliveryFree}")
                    
                    val newDeliveryCost = estimate.deliveryCost
                    val currentState = _uiState.value
                    
                    _uiState.value = currentState.copy(
                        deliveryEstimate = estimate,
                        deliveryCost = newDeliveryCost,
                        total = currentState.subtotal + newDeliveryCost,
                        isCalculatingDelivery = false,
                        deliveryCalculationError = null
                    )
                }
                .onFailure { error ->
                    Log.e("PaymentViewModel", "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${error.message}")
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    val defaultCost = DeliveryMethod.DELIVERY.cost
                    val currentState = _uiState.value
                    
                    _uiState.value = currentState.copy(
                        deliveryCost = defaultCost,
                        total = currentState.subtotal + defaultCost,
                        isCalculatingDelivery = false,
                        deliveryCalculationError = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ."
                    )
                }
        }
    }
    
    fun selectPaymentMethod(method: PaymentMethod) {
        viewModelScope.launch {
            Log.d("PaymentViewModel", "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã:")
            Log.d("PaymentViewModel", "  –ë—ã–ª–æ: ${_uiState.value.selectedPaymentMethod.displayName}")
            Log.d("PaymentViewModel", "  –°—Ç–∞–ª–æ: ${method.displayName}")
            _uiState.value = _uiState.value.copy(
                selectedPaymentMethod = method
            )
        }
    }
    
    fun selectDeliveryMethod(method: DeliveryMethod) {
        viewModelScope.launch {
            Log.d("PaymentViewModel", "–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${method.displayName}")
            val currentState = _uiState.value
            
            if (method == DeliveryMethod.DELIVERY) {
                // –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
                val deliveryCost = currentState.deliveryEstimate?.deliveryCost ?: method.cost
                _uiState.value = currentState.copy(
                    selectedDeliveryMethod = method,
                    deliveryCost = deliveryCost,
                    total = currentState.subtotal + deliveryCost
                )
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥—Ä–µ—Å –∏ –Ω–µ—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
                val address = orderData?.deliveryAddress
                if (address?.isNotBlank() == true && currentState.deliveryEstimate == null) {
                    calculateDeliveryCost(address, currentState.subtotal)
                }
            } else {
                // –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ 0
                _uiState.value = currentState.copy(
                    selectedDeliveryMethod = method,
                    deliveryCost = method.cost,
                    total = currentState.subtotal + method.cost
                )
            }
        }
    }
    
    fun createOrder() {
        Log.d("PaymentViewModel", "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
        val data = orderData
        if (data == null) {
            Log.e("PaymentViewModel", "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            _uiState.value = _uiState.value.copy(
                error = "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        if (data.cartItems.isEmpty()) {
            Log.e("PaymentViewModel", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
            _uiState.value = _uiState.value.copy(
                error = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."
            )
            return
        }
        
        Log.d("PaymentViewModel", "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞–π–¥–µ–Ω—ã: —Ç–æ–≤–∞—Ä–æ–≤=${data.cartItems.size}, –∞–¥—Ä–µ—Å=${data.deliveryAddress}, —Ç–µ–ª–µ—Ñ–æ–Ω=${data.customerPhone}, –∏–º—è=${data.customerName}")
        
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isCreatingOrder = true,
                error = null
            )
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                val currentUser = authRepository.getCurrentUser()
                if (currentUser == null) {
                    Log.e("PaymentViewModel", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                    _uiState.value = _uiState.value.copy(
                        isCreatingOrder = false,
                        error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                    )
                    return@launch
                }
                
                Log.d("PaymentViewModel", "–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${currentUser.id}, email=${currentUser.email}")
                Log.d("PaymentViewModel", "üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞:")
                Log.d("PaymentViewModel", "  üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${_uiState.value.selectedPaymentMethod.displayName}")
                Log.d("PaymentViewModel", "  üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${_uiState.value.selectedDeliveryMethod.displayName}")
                Log.d("PaymentViewModel", "  üí∞ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${_uiState.value.subtotal} ‚ÇΩ")
                Log.d("PaymentViewModel", "  üöõ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${_uiState.value.deliveryCost} ‚ÇΩ") 
                Log.d("PaymentViewModel", "  üí∏ –û–±—â–∞—è —Å—É–º–º–∞: ${_uiState.value.total} ‚ÇΩ")
                Log.d("PaymentViewModel", "–í—ã–∑—ã–≤–∞–µ–º CreateOrderUseCase...")
                
                val result = createOrderUseCase(
                    userId = currentUser.id,
                    deliveryAddress = data.deliveryAddress,
                    customerPhone = data.customerPhone,
                    customerName = data.customerName,
                    notes = data.notes,
                    paymentMethod = _uiState.value.selectedPaymentMethod,
                    deliveryMethod = _uiState.value.selectedDeliveryMethod
                )
                
                Log.d("PaymentViewModel", "–†–µ–∑—É–ª—å—Ç–∞—Ç CreateOrderUseCase: success=${result.isSuccess}")
                
                if (result.isSuccess) {
                    val orderId = result.getOrNull()
                    Log.d("PaymentViewModel", "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: $orderId")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                    if (_uiState.value.selectedPaymentMethod == PaymentMethod.SBP && orderId != null) {
                        // –î–ª—è –°–ë–ü —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞
                        Log.d("PaymentViewModel", "–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –°–ë–ü –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId")
                        createSbpPayment(orderId, _uiState.value.total, currentUser.email ?: "", data.customerPhone)
                    } else {
                        // –î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É—Å–ø–µ—Ö
                        handleOrderSuccess(orderId, currentUser.id)
                    }
                } else {
                    val error = result.exceptionOrNull()?.message ?: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
                    Log.e("PaymentViewModel", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: $error")
                    _uiState.value = _uiState.value.copy(
                        isCreatingOrder = false,
                        error = error
                    )
                }
            } catch (e: Exception) {
                Log.e("PaymentViewModel", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ createOrder: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    isCreatingOrder = false,
                    error = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}"
                )
            }
        }
    }
    
    private suspend fun createSbpPayment(orderId: Long, amount: Double, email: String, phone: String) {
        try {
            val currentState = _uiState.value
            Log.d("PaymentViewModel", "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞ API –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId")
            Log.d("PaymentViewModel", "  üí∞ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ (subtotal): ${currentState.subtotal} ‚ÇΩ")
            Log.d("PaymentViewModel", "  üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${currentState.deliveryCost} ‚ÇΩ")
            Log.d("PaymentViewModel", "  üí≥ –û–±—â–∞—è —Å—É–º–º–∞ (total): ${currentState.total} ‚ÇΩ")
            Log.d("PaymentViewModel", "  üì§ –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º–∞—è —Å—É–º–º–∞ (amount): $amount ‚ÇΩ")
            
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
            if (amount <= 0) {
                Log.e("PaymentViewModel", "‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: $amount")
                _uiState.value = _uiState.value.copy(
                    isCreatingOrder = false,
                    error = "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ($amount ‚ÇΩ)"
                )
                return
            }
            
            val request = CreatePaymentRequest(
                amount = amount,
                currency = "RUB",
                orderId = orderId,
                paymentMethod = PaymentMethod.SBP,
                description = "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #$orderId —á–µ—Ä–µ–∑ –°–ë–ü",
                customerEmail = email.takeIf { it.isNotBlank() },
                customerPhone = phone.takeIf { it.isNotBlank() },
                returnUrl = "dimbopizza://payment_result"
            )
            
            Log.d("PaymentViewModel", "üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:")
            Log.d("PaymentViewModel", "  orderId: $orderId")
            Log.d("PaymentViewModel", "  amount: $amount")
            Log.d("PaymentViewModel", "  currency: RUB")
            Log.d("PaymentViewModel", "  method: SBP")
            Log.d("PaymentViewModel", "  email: ${request.customerEmail ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"}")
            Log.d("PaymentViewModel", "  phone: ${request.customerPhone ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"}")
            Log.d("PaymentViewModel", "  description: ${request.description}")
            
            val paymentResult = createPaymentUseCase(request)
            
            if (paymentResult.isSuccess) {
                val paymentInfo = paymentResult.getOrNull()
                Log.d("PaymentViewModel", "‚úÖ –°–ë–ü –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞:")
                Log.d("PaymentViewModel", "  ID: ${paymentInfo?.id}")
                Log.d("PaymentViewModel", "  URL: ${paymentInfo?.confirmationUrl}")
                Log.d("PaymentViewModel", "  –°—Ç–∞—Ç—É—Å: ${paymentInfo?.status}")
                
                _uiState.value = _uiState.value.copy(
                    isCreatingOrder = false,
                    needsPayment = true,
                    paymentUrl = paymentInfo?.confirmationUrl,
                    createdOrderId = orderId
                )
            } else {
                val error = paymentResult.exceptionOrNull()?.message ?: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
                Log.e("PaymentViewModel", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞: $error")
                
                _uiState.value = _uiState.value.copy(
                    isCreatingOrder = false,
                    error = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: $error"
                )
            }
        } catch (e: Exception) {
            Log.e("PaymentViewModel", "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞: ${e.message}")
            _uiState.value = _uiState.value.copy(
                isCreatingOrder = false,
                error = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${e.message}"
            )
        }
    }
    
    private suspend fun handleOrderSuccess(orderId: Long?, userId: Long) {
        Log.d("PaymentViewModel", "üìã handleOrderSuccess –≤—ã–∑–≤–∞–Ω:")
        Log.d("PaymentViewModel", "  orderId: $orderId")
        Log.d("PaymentViewModel", "  userId: $userId")
        Log.d("PaymentViewModel", "  orderData –µ—Å—Ç—å: ${orderData != null}")
        
        if (orderId != null && orderData != null) {
            try {
                // –°–æ–∑–¥–∞–µ–º Order –æ–±—ä–µ–∫—Ç –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                val currentState = _uiState.value
                val data = orderData!!
                
                Log.d("PaymentViewModel", "üõí –î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã:")
                Log.d("PaymentViewModel", "  –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${data.cartItems.size}")
                data.cartItems.forEachIndexed { index, item ->
                    Log.d("PaymentViewModel", "    ${index + 1}. ${item.productName} - ${item.quantity} √ó ${item.productPrice}‚ÇΩ = ${item.totalPrice}‚ÇΩ")
                }
                Log.d("PaymentViewModel", "  üìç –ê–¥—Ä–µ—Å: '${data.deliveryAddress}'")
                Log.d("PaymentViewModel", "  üìû –¢–µ–ª–µ—Ñ–æ–Ω: '${data.customerPhone}'")
                Log.d("PaymentViewModel", "  üë§ –ò–º—è: '${data.customerName}'")
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CartItem –≤ OrderItem —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                val orderItems = data.cartItems.mapIndexed { index, cartItem ->
                    Log.d("PaymentViewModel", "–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä ${index + 1}: ${cartItem.productName}")
                    OrderItem(
                        id = 0L, // –î–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã
                        orderId = orderId,
                        productId = cartItem.productId,
                        productName = cartItem.productName,
                        productPrice = cartItem.productPrice,
                        quantity = cartItem.quantity,
                        totalPrice = cartItem.totalPrice
                    )
                }
                
                Log.d("PaymentViewModel", "üìä –°—É–º–º—ã:")
                Log.d("PaymentViewModel", "  –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ (subtotal): ${currentState.subtotal}‚ÇΩ")
                Log.d("PaymentViewModel", "  –î–æ—Å—Ç–∞–≤–∫–∞: ${currentState.deliveryCost}‚ÇΩ")
                Log.d("PaymentViewModel", "  –ò–¢–û–ì–û: ${currentState.subtotal + currentState.deliveryCost}‚ÇΩ")
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π Order –æ–±—ä–µ–∫—Ç
                val createdOrder = Order(
                    id = orderId,
                    userId = userId,
                    items = orderItems,
                    status = OrderStatus.PENDING,
                    totalAmount = currentState.subtotal,
                    deliveryMethod = currentState.selectedDeliveryMethod,
                    deliveryAddress = data.deliveryAddress,
                    deliveryCost = currentState.deliveryCost,
                    paymentMethod = currentState.selectedPaymentMethod,
                    customerPhone = data.customerPhone,
                    customerName = data.customerName,
                    notes = data.notes,
                    estimatedDeliveryTime = null,
                    createdAt = LocalDateTime.now(),
                    updatedAt = LocalDateTime.now()
                )
                
                Log.d("PaymentViewModel", "‚úÖ –°–æ–∑–¥–∞–Ω Order –æ–±—ä–µ–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
                Log.d("PaymentViewModel", "  ID: ${createdOrder.id}")
                Log.d("PaymentViewModel", "  –¢–æ–≤–∞—Ä–æ–≤: ${createdOrder.items.size}")
                Log.d("PaymentViewModel", "  –°—É–º–º–∞: ${createdOrder.totalAmount}")
                Log.d("PaymentViewModel", "  –î–æ—Å—Ç–∞–≤–∫–∞: ${createdOrder.deliveryCost}")
                Log.d("PaymentViewModel", "  –ò—Ç–æ–≥–æ: ${createdOrder.grandTotal}")
                Log.d("PaymentViewModel", "  –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${createdOrder.paymentMethod.displayName}")
                Log.d("PaymentViewModel", "  üìç –ê–¥—Ä–µ—Å –≤ Order: '${createdOrder.deliveryAddress}'")
                Log.d("PaymentViewModel", "  üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤ Order: '${createdOrder.customerPhone}'")
                Log.d("PaymentViewModel", "  üë§ –ò–º—è –≤ Order: '${createdOrder.customerName}'")
                
                // üíæ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è OrderSuccessScreen
                Log.d("PaymentViewModel", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ SharedOrderStorage")
                sharedOrderStorage.saveOrder(createdOrder)
                
                _uiState.value = _uiState.value.copy(
                    isCreatingOrder = false,
                    orderCreated = true,
                    createdOrderId = orderId,
                    createdOrder = createdOrder
                )
                
                Log.d("PaymentViewModel", "üéØ UiState –æ–±–Ω–æ–≤–ª–µ–Ω —Å createdOrder!")
                
            } catch (e: Exception) {
                Log.e("PaymentViewModel", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Order –æ–±—ä–µ–∫—Ç–∞: ${e.message}")
                Log.e("PaymentViewModel", "‚ùå Stacktrace: ${e.stackTraceToString()}")
                
                // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Order –æ–±—ä–µ–∫—Ç
                try {
                    val currentState = _uiState.value
                    val data = orderData!!
                    
                    val simpleOrder = Order(
                        id = orderId,
                        userId = userId,
                        items = listOf(
                            OrderItem(
                                id = 1L,
                                orderId = orderId,
                                productId = 1L,
                                productName = "–ó–∞–∫–∞–∑ #$orderId",
                                productPrice = currentState.subtotal,
                                quantity = 1,
                                totalPrice = currentState.subtotal
                            )
                        ),
                        status = OrderStatus.PENDING,
                        totalAmount = currentState.subtotal,
                        deliveryMethod = currentState.selectedDeliveryMethod,
                        deliveryAddress = data.deliveryAddress,
                        deliveryCost = currentState.deliveryCost,
                        paymentMethod = currentState.selectedPaymentMethod,
                        customerPhone = data.customerPhone,
                        customerName = data.customerName,
                        notes = data.notes,
                        estimatedDeliveryTime = null,
                        createdAt = LocalDateTime.now(),
                        updatedAt = LocalDateTime.now()
                    )
                    
                    Log.w("PaymentViewModel", "‚ö†Ô∏è –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π Order –æ–±—ä–µ–∫—Ç –∫–∞–∫ fallback")
                    
                    _uiState.value = _uiState.value.copy(
                        isCreatingOrder = false,
                        orderCreated = true,
                        createdOrderId = orderId,
                        createdOrder = simpleOrder
                    )
                } catch (e2: Exception) {
                    Log.e("PaymentViewModel", "‚ùå –î–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π Order —Å–æ–∑–¥–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å: ${e2.message}")
                    // Fallback - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
                _uiState.value = _uiState.value.copy(
                    isCreatingOrder = false,
                    orderCreated = true,
                        createdOrderId = orderId,
                        createdOrder = null
                )
                }
            }
        } else {
            Log.w("PaymentViewModel", "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Order –æ–±—ä–µ–∫—Ç–∞")
            Log.w("PaymentViewModel", "  orderId: $orderId")
            Log.w("PaymentViewModel", "  orderData: ${orderData != null}")
            _uiState.value = _uiState.value.copy(
                isCreatingOrder = false,
                orderCreated = true,
                createdOrderId = orderId,
                createdOrder = null
            )
        }
    }
    
    fun onPaymentSuccess() {
        Log.d("PaymentViewModel", "üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        // –°–æ–∑–¥–∞–µ–º Order –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞
        if (orderData != null && _uiState.value.createdOrderId != null) {
            try {
                val currentState = _uiState.value
                val data = orderData!!
                val orderId = currentState.createdOrderId!!
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CartItem –≤ OrderItem
                val orderItems = data.cartItems.map { cartItem ->
                    OrderItem(
                        id = 0L,
                        orderId = orderId,
                        productId = cartItem.productId,
                        productName = cartItem.productName,
                        productPrice = cartItem.productPrice,
                        quantity = cartItem.quantity,
                        totalPrice = cartItem.totalPrice
                    )
                }
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π Order –æ–±—ä–µ–∫—Ç –¥–ª—è –°–ë–ü –∑–∞–∫–∞–∑–∞
                val createdOrder = Order(
                    id = orderId,
                    userId = 0L, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                    items = orderItems,
                    status = OrderStatus.CONFIRMED, // –°–ë–ü –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
                    totalAmount = currentState.subtotal,
                    deliveryMethod = currentState.selectedDeliveryMethod,
                    deliveryAddress = data.deliveryAddress,
                    deliveryCost = currentState.deliveryCost,
                    paymentMethod = currentState.selectedPaymentMethod,
                    customerPhone = data.customerPhone,
                    customerName = data.customerName,
                    notes = data.notes,
                    estimatedDeliveryTime = null,
                    createdAt = LocalDateTime.now(),
                    updatedAt = LocalDateTime.now()
                )
                
                Log.d("PaymentViewModel", "‚úÖ –°–æ–∑–¥–∞–Ω Order –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –°–ë–ü:")
                Log.d("PaymentViewModel", "  ID: ${createdOrder.id}")
                Log.d("PaymentViewModel", "  –°—Ç–∞—Ç—É—Å: ${createdOrder.status.displayName}")
                Log.d("PaymentViewModel", "  –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${createdOrder.paymentMethod.displayName}")
                
                // üíæ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è OrderSuccessScreen
                Log.d("PaymentViewModel", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –°–ë–ü –∑–∞–∫–∞–∑ –≤ SharedOrderStorage")
                sharedOrderStorage.saveOrder(createdOrder)
                
                _uiState.value = _uiState.value.copy(
                    needsPayment = false,
                    orderCreated = true,
                    paymentUrl = null,
                    createdOrder = createdOrder
                )
            } catch (e: Exception) {
                Log.e("PaymentViewModel", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Order –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: ${e.message}")
                // Fallback –±–µ–∑ Order –æ–±—ä–µ–∫—Ç–∞
                _uiState.value = _uiState.value.copy(
                    needsPayment = false,
                    orderCreated = true,
                    paymentUrl = null
                )
            }
        } else {
            Log.w("PaymentViewModel", "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Order –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
        _uiState.value = _uiState.value.copy(
            needsPayment = false,
            orderCreated = true,
            paymentUrl = null
        )
        }
    }
    
    fun onPaymentFailed() {
        Log.d("PaymentViewModel", "–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è")
        _uiState.value = _uiState.value.copy(
            needsPayment = false,
            paymentUrl = null,
            error = "–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    }
    
    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }
    
    /**
     * –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
     */
    fun resetOrderCreated() {
        _uiState.value = _uiState.value.copy(orderCreated = false)
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    fun clearDeliveryError() {
        _uiState.value = _uiState.value.copy(deliveryCalculationError = null)
    }
} 