/**
 * @file: OrderSuccessViewModel.kt
 * @description: ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 * @dependencies: Hilt, ViewModel, GetOrderByIdUseCase
 * @created: 2024-12-25
 */
package com.pizzanat.app.presentation.order

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.entities.Order
import com.pizzanat.app.domain.entities.OrderItem
import com.pizzanat.app.domain.entities.OrderStatus
import com.pizzanat.app.domain.entities.DeliveryMethod
import com.pizzanat.app.domain.entities.PaymentMethod
import com.pizzanat.app.domain.usecases.order.GetOrderByIdUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.time.LocalDateTime
import javax.inject.Inject

data class OrderSuccessUiState(
    val isLoading: Boolean = true,
    val order: Order? = null,
    val error: String? = null
)

@HiltViewModel
class OrderSuccessViewModel @Inject constructor(
    private val getOrderByIdUseCase: GetOrderByIdUseCase,
    private val sharedOrderStorage: SharedOrderStorage
) : ViewModel() {
    
    private val _uiState = MutableStateFlow(OrderSuccessUiState())
    val uiState: StateFlow<OrderSuccessUiState> = _uiState.asStateFlow()
    
    fun loadOrder(orderId: Long) {
        Log.d("OrderSuccessViewModel", "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞ #$orderId - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SharedOrderStorage")
        
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isLoading = true,
                error = null
            )
            
            // üéØ –ù–û–í–û–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SharedOrderStorage 
            Log.d("OrderSuccessViewModel", "üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º SharedOrderStorage –¥–ª—è –∑–∞–∫–∞–∑–∞ #$orderId")
            val cachedOrder = sharedOrderStorage.getOrder(orderId)
            
            if (cachedOrder != null) {
                Log.d("OrderSuccessViewModel", "‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ SharedOrderStorage!")
                Log.d("OrderSuccessViewModel", "  üìä –î–∞–Ω–Ω—ã–µ –∏–∑ PaymentViewModel:")
                Log.d("OrderSuccessViewModel", "    ID: ${cachedOrder.id}")
                Log.d("OrderSuccessViewModel", "    –¢–æ–≤–∞—Ä–æ–≤: ${cachedOrder.items.size}")
                Log.d("OrderSuccessViewModel", "    –°—É–º–º–∞: ${cachedOrder.totalAmount}")
                Log.d("OrderSuccessViewModel", "    –î–æ—Å—Ç–∞–≤–∫–∞: ${cachedOrder.deliveryCost}")
                Log.d("OrderSuccessViewModel", "    –ò–¢–û–ì–û: ${cachedOrder.grandTotal}")
                
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    order = cachedOrder,
                    error = null
                )
                return@launch
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ cache, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API –∫–∞–∫ fallback
            Log.d("OrderSuccessViewModel", "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ SharedOrderStorage, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API")
            
            try {
                val result = getOrderByIdUseCase(orderId)
                
                if (result.isSuccess) {
                    val order = result.getOrNull()
                    if (order != null) {
                        Log.d("OrderSuccessViewModel", "‚úÖ –ó–∞–∫–∞–∑ #$orderId –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ API:")
                        Log.d("OrderSuccessViewModel", "  –¢–æ–≤–∞—Ä–æ–≤: ${order.items.size}")
                        order.items.forEachIndexed { index, item ->
                            Log.d("OrderSuccessViewModel", "    ${index + 1}. ${item.productName} - ${item.quantity} √ó ${item.productPrice}‚ÇΩ")
                        }
                        Log.d("OrderSuccessViewModel", "  üìç –ê–¥—Ä–µ—Å: '${order.deliveryAddress}'")
                        Log.d("OrderSuccessViewModel", "  üìû –¢–µ–ª–µ—Ñ–æ–Ω: '${order.customerPhone}'")
                        Log.d("OrderSuccessViewModel", "  üë§ –ò–º—è: '${order.customerName}'")
                        Log.d("OrderSuccessViewModel", "  üí∞ –ò—Ç–æ–≥–æ: ${order.grandTotal}‚ÇΩ")
                        
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            order = order,
                            error = null
                        )
                    } else {
                        Log.w("OrderSuccessViewModel", "‚ö†Ô∏è –ó–∞–∫–∞–∑ #$orderId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API")
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            order = createFallbackOrder(orderId),
                            error = "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
                        )
                    }
                } else {
                    val error = result.exceptionOrNull()?.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞"
                    Log.e("OrderSuccessViewModel", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ #$orderId: $error")
                    
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        order = createFallbackOrder(orderId),
                        error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: $error"
                    )
                }
            } catch (e: Exception) {
                Log.e("OrderSuccessViewModel", "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞ #$orderId: ${e.message}")
                
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    order = createFallbackOrder(orderId),
                    error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞"
                )
            }
        }
    }
    
    private fun createFallbackOrder(orderId: Long): Order {
        Log.d("OrderSuccessViewModel", "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∑–∞–∫–∞–∑–∞ #$orderId")
        
        return Order(
            id = orderId,
            userId = 1L,
            items = listOf(
                OrderItem(
                    id = 1L,
                    orderId = orderId,
                    productId = 1L,
                    productName = "–ó–∞–∫–∞–∑ #$orderId",
                    productPrice = 1.0,
                    quantity = 1,
                    totalPrice = 1.0
                )
            ),
            status = OrderStatus.PENDING,
            totalAmount = 1.0,
            deliveryMethod = DeliveryMethod.DELIVERY,
            deliveryAddress = "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            deliveryCost = 0.0,
            paymentMethod = PaymentMethod.SBP,
            customerPhone = "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            customerName = "–ö–ª–∏–µ–Ω—Ç",
            notes = "–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è fallback –¥–∞–Ω–Ω—ã–µ",
            estimatedDeliveryTime = null,
            createdAt = LocalDateTime.now(),
            updatedAt = LocalDateTime.now()
        )
    }
    
    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }
} 