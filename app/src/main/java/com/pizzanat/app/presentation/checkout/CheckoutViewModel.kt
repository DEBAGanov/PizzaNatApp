/**
 * @file: CheckoutViewModel.kt
 * @description: ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
 * @dependencies: Hilt, ViewModel, Use Cases, Coroutines
 * @created: 2024-12-19
 */
package com.pizzanat.app.presentation.checkout

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.entities.SimpleAddressSuggestion
import com.pizzanat.app.domain.entities.CartItem
import com.pizzanat.app.domain.usecases.address.GetAddressSuggestionsUseCase
import com.pizzanat.app.domain.usecases.cart.GetCartItemsUseCase
import com.pizzanat.app.domain.usecases.user.GetUserDefaultDataUseCase
import com.pizzanat.app.domain.usecases.user.SaveUserPreferencesUseCase
import com.pizzanat.app.presentation.components.isValidPhoneNumber
import com.pizzanat.app.presentation.components.normalizePhoneForApi
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class CheckoutUiState(
    val cartItems: List<CartItem> = emptyList(),
    val totalPrice: Double = 0.0,
    val totalItems: Int = 0,
    val deliveryAddress: String = "",
    val customerPhone: String = "+7",
    val customerName: String = "",
    val notes: String = "",
    val addressError: String? = null,
    val phoneError: String? = null,
    val nameError: String? = null,
    val isLoading: Boolean = false,
    val error: String? = null,
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
    val addressSuggestions: List<SimpleAddressSuggestion> = emptyList(),
    val isLoadingAddressSuggestions: Boolean = false,
    val addressSuggestionsError: String? = null
)

/**
 * –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PaymentScreen
 */
data class OrderData(
    val cartItems: List<CartItem>,
    val totalPrice: Double,
    val deliveryAddress: String,
    val customerPhone: String,
    val customerName: String,
    val notes: String
)

@HiltViewModel
class CheckoutViewModel @Inject constructor(
    private val getCartItemsUseCase: GetCartItemsUseCase,
    private val getAddressSuggestionsUseCase: GetAddressSuggestionsUseCase,
    private val getUserDefaultDataUseCase: GetUserDefaultDataUseCase,
    private val saveUserPreferencesUseCase: SaveUserPreferencesUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(CheckoutUiState())
    val uiState: StateFlow<CheckoutUiState> = _uiState.asStateFlow()
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PaymentScreen
    private var _savedOrderData: OrderData? = null
    val savedOrderData: OrderData? get() = _savedOrderData

    init {
        loadCartItems()
        loadUserDefaultData()
    }

    private fun loadCartItems() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true)
            
            getCartItemsUseCase().collect { cartItems ->
                val totalPrice = cartItems.sumOf { it.totalPrice }
                val totalItems = cartItems.sumOf { it.quantity }
                
                _uiState.value = _uiState.value.copy(
                    cartItems = cartItems,
                    totalPrice = totalPrice,
                    totalItems = totalItems,
                    isLoading = false
                )
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private fun loadUserDefaultData() {
        viewModelScope.launch {
            try {
                android.util.Log.d("CheckoutViewModel", "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...")
                
                val currentState = _uiState.value
                android.util.Log.d("CheckoutViewModel", "üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π:")
                android.util.Log.d("CheckoutViewModel", "  –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: '${currentState.deliveryAddress}'")
                android.util.Log.d("CheckoutViewModel", "  –¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: '${currentState.customerPhone}'")
                android.util.Log.d("CheckoutViewModel", "  –¢–µ–∫—É—â–µ–µ –∏–º—è: '${currentState.customerName}'")
                
                val result = getUserDefaultDataUseCase()
                if (result.isSuccess) {
                    val defaultData = result.getOrNull()
                    if (defaultData != null) {
                        android.util.Log.d("CheckoutViewModel", "‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
                        android.util.Log.d("CheckoutViewModel", "  –ò–º—è: '${defaultData.customerName}'")
                        android.util.Log.d("CheckoutViewModel", "  –¢–µ–ª–µ—Ñ–æ–Ω: '${defaultData.customerPhone}'")
                        android.util.Log.d("CheckoutViewModel", "  –ê–¥—Ä–µ—Å: '${defaultData.deliveryAddress}'")
                        
                        // –£—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                        val shouldFillAddress = currentState.deliveryAddress.isBlank() && defaultData.deliveryAddress.isNotBlank()
                        val shouldFillPhone = (currentState.customerPhone.isBlank() || currentState.customerPhone == "+7") && defaultData.customerPhone.isNotBlank() && defaultData.customerPhone != "+7"
                        val shouldFillName = currentState.customerName.isBlank() && defaultData.customerName.isNotBlank()
                        
                        android.util.Log.d("CheckoutViewModel", "üîç –£—Å–ª–æ–≤–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:")
                        android.util.Log.d("CheckoutViewModel", "  –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–¥—Ä–µ—Å: $shouldFillAddress")
                        android.util.Log.d("CheckoutViewModel", "  –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: $shouldFillPhone")
                        android.util.Log.d("CheckoutViewModel", "  –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–º—è: $shouldFillName")
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
                        _uiState.value = _uiState.value.copy(
                            deliveryAddress = if (shouldFillAddress) defaultData.deliveryAddress else currentState.deliveryAddress,
                            customerPhone = if (shouldFillPhone) defaultData.customerPhone else currentState.customerPhone,
                            customerName = if (shouldFillName) defaultData.customerName else currentState.customerName
                        )
                        
                        val finalState = _uiState.value
                        android.util.Log.d("CheckoutViewModel", "üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π:")
                        android.util.Log.d("CheckoutViewModel", "  –ò—Ç–æ–≥–æ–≤—ã–π –∞–¥—Ä–µ—Å: '${finalState.deliveryAddress}'")
                        android.util.Log.d("CheckoutViewModel", "  –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: '${finalState.customerPhone}'")
                        android.util.Log.d("CheckoutViewModel", "  –ò—Ç–æ–≥–æ–≤–æ–µ –∏–º—è: '${finalState.customerName}'")
                        
                    } else {
                        android.util.Log.w("CheckoutViewModel", "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç—ã–µ")
                    }
                } else {
                    android.util.Log.w("CheckoutViewModel", "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${result.exceptionOrNull()?.message}")
                }
            } catch (e: Exception) {
                android.util.Log.e("CheckoutViewModel", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏: ${e.message}")
                // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - —Ñ–æ—Ä–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
            }
        }
    }

    fun updateDeliveryAddress(address: String) {
        _uiState.value = _uiState.value.copy(
            deliveryAddress = address,
            addressError = null
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        if (address.isNotBlank() && address.length > 10) {
            viewModelScope.launch {
                saveUserPreferencesUseCase.saveLastDeliveryAddress(address)
            }
        }
    }

    fun updateCustomerPhone(phone: String) {
        _uiState.value = _uiState.value.copy(
            customerPhone = phone,
            phoneError = null
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (phone.isNotBlank() && phone != "+7" && phone.length >= 10) {
            viewModelScope.launch {
                saveUserPreferencesUseCase.saveLastCustomerPhone(phone)
            }
        }
    }

    fun updateCustomerName(name: String) {
        _uiState.value = _uiState.value.copy(
            customerName = name,
            nameError = null
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (name.isNotBlank() && name.length >= 2) {
            viewModelScope.launch {
                saveUserPreferencesUseCase.saveLastCustomerName(name)
            }
        }
    }

    fun updateNotes(notes: String) {
        _uiState.value = _uiState.value.copy(notes = notes)
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—è —Ñ–æ—Ä–º—ã
     * @return true –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –≤–∞–ª–∏–¥–Ω—ã
     */
    fun validateFields(): Boolean {
        return validateFieldsInternal()
    }
    
    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
     */
    private fun validateFieldsInternal(): Boolean {
        var isValid = true
        val currentState = _uiState.value
        
        val addressError = when {
            currentState.deliveryAddress.isBlank() -> "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            currentState.deliveryAddress.length < 10 -> "–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            else -> null
        }
        
        val phoneError = when {
            currentState.customerPhone.isBlank() || currentState.customerPhone == "+7" -> "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            !isValidPhoneNumber(currentState.customerPhone) -> "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            else -> null
        }
        
        val nameError = when {
            currentState.customerName.isBlank() -> "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
            currentState.customerName.length < 2 -> "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"
            else -> null
        }
        
        if (addressError != null || phoneError != null || nameError != null) {
            isValid = false
        }
        
        _uiState.value = _uiState.value.copy(
            addressError = addressError,
            phoneError = phoneError,
            nameError = nameError
        )
        
        return isValid
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PaymentScreen
     */
    fun saveOrderData() {
        val currentState = _uiState.value
        _savedOrderData = OrderData(
            cartItems = currentState.cartItems,
            totalPrice = currentState.totalPrice,
            deliveryAddress = currentState.deliveryAddress,
            customerPhone = normalizePhoneForApi(currentState.customerPhone),
            customerName = currentState.customerName,
            notes = currentState.notes
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        viewModelScope.launch {
            android.util.Log.d("CheckoutViewModel", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
            saveUserPreferencesUseCase.saveOrderData(
                deliveryAddress = currentState.deliveryAddress,
                customerPhone = currentState.customerPhone,
                customerName = currentState.customerName
            )
        }
    }

    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     */
    fun getAddressSuggestions(query: String) {
        if (query.length < 3) {
            _uiState.value = _uiState.value.copy(
                addressSuggestions = emptyList(),
                isLoadingAddressSuggestions = false,
                addressSuggestionsError = null
            )
            return
        }

        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isLoadingAddressSuggestions = true,
                addressSuggestionsError = null
            )

            getAddressSuggestionsUseCase(query)
                .onSuccess { suggestions ->
                    _uiState.value = _uiState.value.copy(
                        addressSuggestions = suggestions,
                        isLoadingAddressSuggestions = false,
                        addressSuggestionsError = null
                    )
                }
                .onFailure { error ->
                    _uiState.value = _uiState.value.copy(
                        addressSuggestions = emptyList(),
                        isLoadingAddressSuggestions = false,
                        addressSuggestionsError = error.message
                    )
                }
        }
    }

    /**
     * –í—ã–±–æ—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–∞
     */
    fun selectAddressSuggestion(suggestion: SimpleAddressSuggestion) {
        _uiState.value = _uiState.value.copy(
            deliveryAddress = suggestion.shortAddress,
            addressSuggestions = emptyList(),
            addressError = null,
            addressSuggestionsError = null
        )
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    fun clearAddressSuggestions() {
        _uiState.value = _uiState.value.copy(
            addressSuggestions = emptyList(),
            isLoadingAddressSuggestions = false,
            addressSuggestionsError = null
        )
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
     */
    fun reloadUserDefaultData() {
        android.util.Log.d("CheckoutViewModel", "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...")
        loadUserDefaultData()
    }
} 