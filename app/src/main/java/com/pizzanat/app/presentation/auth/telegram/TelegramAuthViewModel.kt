/**
 * @file: TelegramAuthViewModel.kt
 * @description: ViewModel –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram —Å —Ä–µ–∞–ª—å–Ω—ã–º API
 * @dependencies: Hilt, ViewModel, StateFlow, Telegram Use Cases
 * @created: 2024-12-20
 * @updated: 2025-01-23 - –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
package com.pizzanat.app.presentation.auth.telegram

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pizzanat.app.domain.entities.TelegramAuthStatus
import com.pizzanat.app.domain.usecases.auth.CheckTelegramAuthStatusUseCase
import com.pizzanat.app.domain.usecases.auth.InitTelegramAuthUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class TelegramAuthUiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val isAuthSuccessful: Boolean = false,
    val telegramAuthUrl: String? = null,
    val authToken: String? = null,
    val isPolling: Boolean = false,
    val isWaitingForAuth: Boolean = false // –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram
)

@HiltViewModel
class TelegramAuthViewModel @Inject constructor(
    private val initTelegramAuthUseCase: InitTelegramAuthUseCase,
    private val checkTelegramAuthStatusUseCase: CheckTelegramAuthStatusUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(TelegramAuthUiState())
    val uiState: StateFlow<TelegramAuthUiState> = _uiState.asStateFlow()
    
    private var pollingJob: Job? = null

    companion object {
        private const val TAG = "TelegramAuthViewModel"
    }

    fun startTelegramAuth() {
        viewModelScope.launch {
            Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            _uiState.value = _uiState.value.copy(
                isLoading = true,
                error = null
            )

            try {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ device ID (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ device ID)
                val deviceId = "android_${System.currentTimeMillis()}"
                Log.d(TAG, "üì± Device ID: $deviceId")
                
                val result = initTelegramAuthUseCase(deviceId)
                
                if (result.isSuccess) {
                    val authInitResponse = result.getOrThrow()
                    Log.d(TAG, "‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
                    Log.d(TAG, "  - Auth Token: ${authInitResponse.authToken}")
                    Log.d(TAG, "  - Bot URL: ${authInitResponse.telegramBotUrl}")
                    Log.d(TAG, "  - Expires At: ${authInitResponse.expiresAt}")
                    
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        telegramAuthUrl = authInitResponse.telegramBotUrl,
                        authToken = authInitResponse.authToken,
                        error = null
                    )
                } else {
                    val exception = result.exceptionOrNull()
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${exception?.message}")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = exception?.message ?: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    )
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", e)
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                )
            }
        }
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è + –æ—Ç–∫—Ä—ã—Ç–∏–µ Telegram –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º
     */
    fun startTelegramAuthAndOpen(onOpenTelegram: (String) -> Unit) {
        viewModelScope.launch {
            Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º")
            _uiState.value = _uiState.value.copy(
                isLoading = true,
                error = null
            )

            try {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ device ID
                val deviceId = "android_${System.currentTimeMillis()}"
                Log.d(TAG, "üì± Device ID: $deviceId")
                
                val result = initTelegramAuthUseCase(deviceId)
                
                if (result.isSuccess) {
                    val authInitResponse = result.getOrThrow()
                    Log.d(TAG, "‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
                    Log.d(TAG, "  - Auth Token: ${authInitResponse.authToken}")
                    Log.d(TAG, "  - Bot URL: ${authInitResponse.telegramBotUrl}")
                    Log.d(TAG, "  - Expires At: ${authInitResponse.expiresAt}")
                    
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        telegramAuthUrl = authInitResponse.telegramBotUrl,
                        authToken = authInitResponse.authToken,
                        error = null,
                        isWaitingForAuth = true
                    )
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º Telegram
                    Log.d(TAG, "üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ Telegram...")
                    onOpenTelegram(authInitResponse.telegramBotUrl)
                    startPollingAuthStatus()
                    
                } else {
                    val exception = result.exceptionOrNull()
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${exception?.message}")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = exception?.message ?: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    )
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", e)
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                )
            }
        }
    }

    fun openTelegramAuth() {
        Log.d(TAG, "üì± –ó–∞–ø—É—Å–∫ Telegram app/web")
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ Telegram app/web —Å auth URL —á–µ—Ä–µ–∑ Intent
        // –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º polling
        startPollingAuthStatus()
    }

    fun checkAuthStatus() {
        val currentAuthToken = _uiState.value.authToken
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${currentAuthToken?.take(20)}...")
        
        if (currentAuthToken == null) {
            Log.w(TAG, "‚ö†Ô∏è Auth token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            _uiState.value = _uiState.value.copy(
                error = "Auth token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
            )
            return
        }
        
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true, error = null)

            try {
                val result = checkTelegramAuthStatusUseCase(currentAuthToken)
                
                if (result.isSuccess) {
                    val statusResponse = result.getOrThrow()
                    Log.d(TAG, "üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
                    Log.d(TAG, "  - Success: ${statusResponse.success}")
                    Log.d(TAG, "  - Status: ${statusResponse.status}")
                    Log.d(TAG, "  - Message: ${statusResponse.message}")
                    Log.d(TAG, "  - Has AuthResponse: ${statusResponse.authResponse != null}")
                    
                    if (statusResponse.authResponse != null) {
                        Log.d(TAG, "üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ:")
                        Log.d(TAG, "  - Token: ${statusResponse.authResponse.token.take(20)}...")
                        Log.d(TAG, "  - User ID: ${statusResponse.authResponse.user.id}")
                        Log.d(TAG, "  - Username: ${statusResponse.authResponse.user.username}")
                        Log.d(TAG, "  - Email: ${statusResponse.authResponse.user.email}")
                        Log.d(TAG, "  - Name: ${statusResponse.authResponse.user.firstName} ${statusResponse.authResponse.user.lastName}")
                    }
                    
                    when (statusResponse.status) {
                        TelegramAuthStatus.CONFIRMED -> {
                            Log.d(TAG, "üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling...")
                            stopPolling()
                            _uiState.value = _uiState.value.copy(
                                isLoading = false,
                                isAuthSuccessful = true,
                                isWaitingForAuth = false,
                                error = null
                            )
                            Log.d(TAG, "‚úÖ UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: isAuthSuccessful = true")
                        }
                        TelegramAuthStatus.PENDING -> {
                            Log.d(TAG, "‚è≥ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏...")
                            _uiState.value = _uiState.value.copy(
                                isLoading = false,
                                error = statusResponse.message ?: "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram"
                            )
                        }
                        TelegramAuthStatus.EXPIRED -> {
                            Log.w(TAG, "‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ")
                            stopPolling()
                            _uiState.value = _uiState.value.copy(
                                isLoading = false,
                                error = "–í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                            )
                        }
                    }
                } else {
                    val exception = result.exceptionOrNull()
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${exception?.message}")
                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        error = exception?.message ?: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    )
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞", e)
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞"
                )
            }
        }
    }

    private fun startPollingAuthStatus() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π polling, –µ—Å–ª–∏ –µ—Å—Ç—å
        stopPolling()
        
        Log.d(TAG, "üîÑ –ó–∞–ø—É—Å–∫ polling —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (12 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥)")
        _uiState.value = _uiState.value.copy(isPolling = true)
        
        pollingJob = viewModelScope.launch {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            repeat(12) { attempt -> // 12 –ø–æ–ø—ã—Ç–æ–∫ = 1 –º–∏–Ω—É—Ç–∞
                Log.d(TAG, "üîç Polling –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/12")
                delay(5000) // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                if (_uiState.value.isAuthSuccessful) {
                    Log.d(TAG, "üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ polling")
                    return@repeat // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                checkAuthStatus()
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
                if (attempt == 11 && !_uiState.value.isAuthSuccessful) {
                    Log.w(TAG, "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è polling –∏—Å—Ç–µ–∫–ª–æ")
                    _uiState.value = _uiState.value.copy(
                        isPolling = false,
                        error = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ (1 –º–∏–Ω—É—Ç–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
                }
            }
            
            _uiState.value = _uiState.value.copy(isPolling = false)
            Log.d(TAG, "üîÑ Polling –∑–∞–≤–µ—Ä—à–µ–Ω")
        }
    }
    
    private fun stopPolling() {
        Log.d(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling")
        pollingJob?.cancel()
        pollingJob = null
        _uiState.value = _uiState.value.copy(isPolling = false)
    }

    fun clearError() {
        Log.d(TAG, "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏")
        _uiState.value = _uiState.value.copy(error = null)
    }

    fun setError(message: String) {
        Log.w(TAG, "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: $message")
        _uiState.value = _uiState.value.copy(error = message)
    }

    fun resetAuth() {
        Log.d(TAG, "üîÑ –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        stopPolling()
        _uiState.value = TelegramAuthUiState()
    }
    
    override fun onCleared() {
        super.onCleared()
        Log.d(TAG, "üßπ ViewModel –æ—á–∏—â–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling")
        stopPolling()
    }
} 