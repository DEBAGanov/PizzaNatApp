/**
 * @file: ProductRepositoryImpl.kt
 * @description: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 * @dependencies: ProductApiService, ApiResult, Mappers
 * @created: 2024-12-19
 */
package com.pizzanat.app.data.repositories

import android.util.Log
import com.pizzanat.app.data.mappers.toDomain
import com.pizzanat.app.data.mappers.toCategoryDomain
import com.pizzanat.app.data.mappers.toProductDomain
import com.pizzanat.app.data.mappers.toProductsDomain
import com.pizzanat.app.data.remote.api.ProductApiService
import com.pizzanat.app.data.remote.util.safeApiCall
import com.pizzanat.app.data.remote.util.toResult
import com.pizzanat.app.domain.entities.Category
import com.pizzanat.app.domain.entities.Product
import com.pizzanat.app.domain.repositories.ProductRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ProductRepositoryImpl @Inject constructor(
    private val productApiService: ProductApiService
) : ProductRepository {
    
    override suspend fun getCategories(): Result<List<Category>> = withContext(Dispatchers.IO) {
        Log.d("ProductRepository", "üåê –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        val apiResult = safeApiCall { 
            productApiService.getCategories() 
        }
        apiResult.toResult().map { categories ->
            categories?.toCategoryDomain() ?: emptyList()
        }.also { result ->
            if (result.isSuccess) {
                Log.d("ProductRepository", "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${result.getOrNull()?.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                result.getOrNull()?.forEach { category ->
                    Log.d("ProductRepository", "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})")
                }
            } else {
                Log.w("ProductRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.exceptionOrNull()?.message}")
            }
        }
    }
    
    override suspend fun getProductsByCategory(
        categoryId: Long,
        page: Int,
        size: Int
    ): Result<List<Product>> = withContext(Dispatchers.IO) {
        Log.d("ProductRepository", "üåê –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $categoryId, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ $page, —Ä–∞–∑–º–µ—Ä $size")
        Log.d("ProductRepository", "üåê URL: products/category/$categoryId?page=$page&size=$size")
        
        val apiResult = safeApiCall { 
            productApiService.getProductsByCategory(categoryId, page, size) 
        }
        apiResult.toResult().map { pageResponse ->
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–∞–ø–ø–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            val products = pageResponse?.toProductsDomain() ?: emptyList()
            Log.d("ProductRepository", "üì¶ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.size}")
            products.forEach { product ->
                Log.d("ProductRepository", "üçï –ü—Ä–æ–¥—É–∫—Ç: ${product.name} (ID: ${product.id}, –¶–µ–Ω–∞: ${product.price}‚ÇΩ)")
            }
            products
        }.also { result ->
            if (result.isSuccess) {
                Log.d("ProductRepository", "‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $categoryId –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${result.getOrNull()?.size} —Ç–æ–≤–∞—Ä–æ–≤")
            } else {
                Log.w("ProductRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $categoryId: ${result.exceptionOrNull()?.message}")
                result.exceptionOrNull()?.printStackTrace()
            }
        }
    }
    
    override suspend fun getProductById(productId: Long): Result<Product> = withContext(Dispatchers.IO) {
        val apiResult = safeApiCall { 
            productApiService.getProductById(productId) 
        }
        apiResult.toResult().map { productDto ->
            productDto?.toDomain() ?: throw Exception("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }.also { result ->
            if (result.isSuccess) {
                Log.d("ProductRepository", "–ü—Ä–æ–¥—É–∫—Ç —Å ID $productId –∑–∞–≥—Ä—É–∂–µ–Ω: ${result.getOrNull()?.name}")
            } else {
                Log.w("ProductRepository", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID $productId: ${result.exceptionOrNull()?.message}")
            }
        }
    }
    
    override suspend fun searchProducts(
        query: String,
        page: Int,
        size: Int
    ): Result<List<Product>> = withContext(Dispatchers.IO) {
        val apiResult = safeApiCall { 
            productApiService.searchProducts(query, page, size) 
        }
        apiResult.toResult().map { pageResponse ->
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–∞–ø–ø–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            pageResponse?.toProductsDomain() ?: emptyList()
        }.also { result ->
            if (result.isSuccess) {
                Log.d("ProductRepository", "–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '$query' –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.getOrNull()?.size} —Ç–æ–≤–∞—Ä–æ–≤")
            } else {
                Log.w("ProductRepository", "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '$query': ${result.exceptionOrNull()?.message}")
            }
        }
    }
    
    override suspend fun getSpecialOffers(): Result<List<Product>> = withContext(Dispatchers.IO) {
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç.–∫. API –Ω–µ –≥–æ—Ç–æ–≤
        Result.success(emptyList())
    }
    
    suspend fun getPopularProducts(limit: Int = 10): Result<List<Product>> = withContext(Dispatchers.IO) {
        val apiResult = safeApiCall { productApiService.getPopularProducts(limit) }
        apiResult.toResult().map { products ->
            products?.toProductDomain() ?: emptyList()
        }
    }
    
    suspend fun getRecommendedProducts(limit: Int = 10): Result<List<Product>> = withContext(Dispatchers.IO) {
        val apiResult = safeApiCall { productApiService.getRecommendedProducts(limit) }
        apiResult.toResult().map { products ->
            products?.toProductDomain() ?: emptyList()
        }
    }
    
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –±—É–¥—É—â–µ–º —Å Room)
    override fun getFavoriteProducts(): Flow<List<Product>> {
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –ø–æ—Ç–æ–∫, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        return flowOf(emptyList())
    }
    
    override suspend fun addToFavorites(productId: Long) {
        // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        Log.d("ProductRepository", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: $productId")
    }
    
    override suspend fun removeFromFavorites(productId: Long) {
        // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        Log.d("ProductRepository", "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: $productId")
    }
} 