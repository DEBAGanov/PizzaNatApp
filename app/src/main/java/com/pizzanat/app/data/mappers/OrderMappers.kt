/**
 * @file: OrderMappers.kt
 * @description: –ú–∞–ø–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É Entity –∏ Domain –æ–±—ä–µ–∫—Ç–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
 * @dependencies: Order, OrderEntity, OrderItemEntity
 * @created: 2024-12-19
 */
package com.pizzanat.app.data.mappers

import com.pizzanat.app.data.local.entities.OrderEntity
import com.pizzanat.app.data.local.entities.OrderItemEntity
import com.pizzanat.app.data.remote.dto.AdminOrdersPageResponse
import com.pizzanat.app.data.remote.dto.CreateOrderRequest
import com.pizzanat.app.data.remote.dto.OrderDto
import com.pizzanat.app.data.remote.dto.OrderItemDto
import com.pizzanat.app.domain.entities.Order
import com.pizzanat.app.domain.entities.OrderItem
import com.pizzanat.app.domain.entities.OrderStatus
import com.pizzanat.app.domain.entities.DeliveryMethod
import com.pizzanat.app.domain.entities.PaymentMethod
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderEntity –≤ Order (Domain)
 */
fun OrderEntity.toDomain(orderItems: List<OrderItemEntity> = emptyList()): Order {
    return Order(
        id = id,
        userId = userId,
        items = orderItems.map { it.toDomain() },
        status = status,
        totalAmount = totalAmount,
        deliveryMethod = deliveryMethod,
        deliveryAddress = deliveryAddress,
        deliveryCost = deliveryCost,
        paymentMethod = paymentMethod,
        customerPhone = customerPhone,
        customerName = customerName,
        notes = notes,
        createdAt = LocalDateTime.ofInstant(Instant.ofEpochMilli(createdAt), ZoneId.systemDefault()),
        updatedAt = LocalDateTime.ofInstant(Instant.ofEpochMilli(updatedAt), ZoneId.systemDefault()),
        estimatedDeliveryTime = estimatedDeliveryTime?.let { 
            LocalDateTime.ofInstant(Instant.ofEpochMilli(it), ZoneId.systemDefault()) 
        }
    )
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderItemEntity –≤ OrderItem (Domain)
 */
fun OrderItemEntity.toDomain(): OrderItem {
    return OrderItem(
        id = id,
        productId = productId,
        productName = productName,
        productPrice = productPrice,
        quantity = quantity
    )
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Order (Domain) –≤ OrderEntity
 */
fun Order.toEntity(): OrderEntity {
    return OrderEntity(
        id = id,
        userId = userId,
        status = status,
        totalAmount = totalAmount,
        deliveryMethod = deliveryMethod,
        deliveryAddress = deliveryAddress,
        deliveryCost = deliveryCost,
        paymentMethod = paymentMethod,
        customerPhone = customerPhone,
        customerName = customerName,
        notes = notes,
        estimatedDeliveryTime = estimatedDeliveryTime?.atZone(ZoneId.systemDefault())?.toInstant()?.toEpochMilli(),
        createdAt = createdAt.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli(),
        updatedAt = updatedAt.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
    )
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderItem –≤ OrderItemEntity
 */
fun OrderItem.toOrderItemEntity(orderId: Long): OrderItemEntity {
    return OrderItemEntity(
        orderId = orderId,
        productId = productId,
        productName = productName,
        productPrice = productPrice,
        productImageUrl = "", // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ –∏–∑ CartItem
        quantity = quantity,
        selectedOptions = emptyMap() // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ –∏–∑ CartItem
    )
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ OrderEntity –≤ —Å–ø–∏—Å–æ–∫ Order
 */
fun List<OrderEntity>.toDomain(): List<Order> {
    return map { it.toDomain() }
}

// API DTO Mappers

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderDto –≤ Order (Domain)
 */
fun OrderDto.toDomain(): Order {
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    android.util.Log.d("OrderMappers", "üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderDto –≤ Order:")
    android.util.Log.d("OrderMappers", "  DTO.id: ${this.id}")
    android.util.Log.d("OrderMappers", "  DTO.totalAmount: ${this.totalAmount}")
    android.util.Log.d("OrderMappers", "  DTO.deliveryFee: ${this.deliveryFee}")
    android.util.Log.d("OrderMappers", "  DTO.deliveryAddress: '${this.deliveryAddress}'")
    android.util.Log.d("OrderMappers", "  DTO.contactName: '${this.contactName}'")
    android.util.Log.d("OrderMappers", "  DTO.contactPhone: '${this.contactPhone}'")
    android.util.Log.d("OrderMappers", "  DTO.items?.size: ${this.items?.size}")
    
    // üîß –§–ò–ö–°: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ 0 –Ω–æ –µ—Å—Ç—å –∞–¥—Ä–µ—Å
    val actualDeliveryCost = if (this.deliveryFee == 0.0 && this.deliveryAddress.isNotBlank() && this.deliveryAddress != "–°–∞–º–æ–≤—ã–≤–æ–∑") {
        250.0 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –í–æ–ª–∂—Å–∫–∞
    } else {
        this.deliveryFee
    }
    
    // üîß –ù–û–í–´–ô –§–ò–ö–°: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    val domainItems = this.items?.map { it.toDomain() } ?: emptyList()
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º totalAmount –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
    val calculatedTotalAmount = domainItems.sumOf { it.totalPrice }
    
    android.util.Log.d("OrderMappers", "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    android.util.Log.d("OrderMappers", "  –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: $actualDeliveryCost (–±—ã–ª–æ: ${this.deliveryFee})")
    android.util.Log.d("OrderMappers", "  TotalAmount –∏–∑ API: ${this.totalAmount}")
    android.util.Log.d("OrderMappers", "  TotalAmount –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è: $calculatedTotalAmount")
    android.util.Log.d("OrderMappers", "  –†–∞–∑–Ω–∏—Ü–∞: ${calculatedTotalAmount - this.totalAmount}")
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç API
    val actualTotalAmount = if (kotlin.math.abs(calculatedTotalAmount - this.totalAmount) > 10.0) {
        android.util.Log.w("OrderMappers", "‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –†–ê–ó–ù–ò–¶–ê! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É: $calculatedTotalAmount –≤–º–µ—Å—Ç–æ ${this.totalAmount}")
        calculatedTotalAmount
    } else {
        this.totalAmount
    }
    
    return Order(
        id = this.id,
        userId = this.userId ?: 0L,
        items = domainItems,
        status = parseOrderStatus(this.status),
        totalAmount = actualTotalAmount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
        deliveryMethod = DeliveryMethod.DELIVERY, // Backend –ø–æ–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
        deliveryAddress = this.deliveryAddress,
        deliveryCost = actualDeliveryCost, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        paymentMethod = PaymentMethod.CARD_ON_DELIVERY, // Backend –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç paymentMethod –≤ OrderDto
        customerPhone = this.contactPhone,
        customerName = this.contactName,
        notes = this.comment ?: "",
        createdAt = parseDateTime(this.createdAt),
        updatedAt = parseDateTime(this.updatedAt ?: this.createdAt),
        estimatedDeliveryTime = this.estimatedDeliveryTime?.let { parseDateTime(it) }
    ).also { domainOrder ->
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        android.util.Log.d("OrderMappers", "‚úÖ –°–æ–∑–¥–∞–Ω Domain Order:")
        android.util.Log.d("OrderMappers", "  Domain.id: ${domainOrder.id}")
        android.util.Log.d("OrderMappers", "  Domain.totalAmount: ${domainOrder.totalAmount}")
        android.util.Log.d("OrderMappers", "  Domain.deliveryCost: ${domainOrder.deliveryCost}")
        android.util.Log.d("OrderMappers", "  Domain.grandTotal: ${domainOrder.grandTotal}")
        android.util.Log.d("OrderMappers", "  Domain.items.size: ${domainOrder.items.size}")
        domainOrder.items.forEachIndexed { index, item ->
            android.util.Log.d("OrderMappers", "    Final Item ${index + 1}: ${item.productName} - ${item.quantity} √ó ${item.productPrice}‚ÇΩ = ${item.totalPrice}‚ÇΩ")
        }
    }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderItemDto –≤ OrderItem (Domain)
 */
fun OrderItemDto.toDomain(): OrderItem {
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    android.util.Log.d("OrderItemMappers", "üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OrderItemDto –≤ OrderItem:")
    android.util.Log.d("OrderItemMappers", "  productName: '${this.productName}'")
    android.util.Log.d("OrderItemMappers", "  price: ${this.price}")
    android.util.Log.d("OrderItemMappers", "  productPrice: ${this.productPrice}")
    android.util.Log.d("OrderItemMappers", "  quantity: ${this.quantity}")
    
    // üîß –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º productPrice (—Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞) –≤–º–µ—Å—Ç–æ price (—Å–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞)
    val actualPrice = this.productPrice ?: this.price
    android.util.Log.d("OrderItemMappers", "  üìä –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: $actualPrice (productPrice=${this.productPrice}, price=${this.price})")
    
    return OrderItem(
        id = this.id,
        productId = this.productId,
        productName = this.productName,
        productPrice = actualPrice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞
        quantity = this.quantity
    )
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ AdminOrdersPageResponse –≤ —Å–ø–∏—Å–æ–∫ Order (Domain)
 */
fun AdminOrdersPageResponse.toDomain(): List<Order> {
    return this.content.map { it.toDomain() }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ CreateOrderRequest –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
fun createOrderRequest(
    deliveryAddress: String,
    contactName: String,
    contactPhone: String,
    comment: String? = null,
    paymentMethod: String = "CASH"
): CreateOrderRequest {
    return CreateOrderRequest(
        deliveryAddress = deliveryAddress,
        contactName = contactName,
        contactPhone = contactPhone,
        comment = comment,
        paymentMethod = paymentMethod
    )
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ Backend API
 */
private fun parseDateTime(dateString: String): LocalDateTime {
    return try {
        // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO 8601 —Ñ–æ—Ä–º–∞—Ç: "2025-06-18T08:19:18.373688"
        LocalDateTime.parse(dateString, DateTimeFormatter.ISO_LOCAL_DATE_TIME)
    } catch (e: Exception) {
        // Fallback –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        LocalDateTime.now()
    }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ Backend API
 */
private fun parseOrderStatus(statusString: String): OrderStatus {
    return try {
        when (statusString.uppercase()) {
            "CREATED" -> OrderStatus.PENDING
            "CONFIRMED" -> OrderStatus.CONFIRMED
            "PREPARING" -> OrderStatus.PREPARING
            "READY" -> OrderStatus.READY
            "DELIVERING" -> OrderStatus.DELIVERING
            "DELIVERED" -> OrderStatus.DELIVERED
            "CANCELLED" -> OrderStatus.CANCELLED
            else -> OrderStatus.PENDING
        }
    } catch (e: Exception) {
        OrderStatus.PENDING
    }
} 