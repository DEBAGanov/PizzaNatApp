/**
 * @file: AdminRepositoryImpl.kt
 * @description: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è AdminRepository —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API (–±–µ–∑ mock fallback)
 * @dependencies: AdminRepository, AdminApiService, OrderApiService, ProductApiService
 * @created: 2024-12-19
 * @updated: 2024-12-20 - –£–±—Ä–∞–Ω—ã –≤—Å–µ mock –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π API
 */
package com.pizzanat.app.data.repositories

import android.util.Log
import com.pizzanat.app.data.mappers.toDomain as adminStatsMapperToDomain
import com.pizzanat.app.data.mappers.toDomain as productMapperToDomain
import com.pizzanat.app.data.mappers.toDomain as categoryMapperToDomain
import com.pizzanat.app.data.mappers.toDomain as orderMapperToDomain
import com.pizzanat.app.data.mappers.toDomain
import com.pizzanat.app.data.mappers.toCreateRequest
import com.pizzanat.app.data.mappers.toUpdateRequest
import com.pizzanat.app.data.mappers.toProductsDomain
import com.pizzanat.app.data.remote.api.AdminApiService
import com.pizzanat.app.data.remote.api.OrderApiService
import com.pizzanat.app.data.remote.api.ProductApiService
import com.pizzanat.app.data.network.api.AuthApiService
import com.pizzanat.app.data.network.dto.LoginRequestDto
import com.pizzanat.app.data.repositories.TokenManager
import com.pizzanat.app.data.remote.util.safeApiCall
import com.pizzanat.app.domain.entities.*
import com.pizzanat.app.domain.repositories.AdminRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.withContext
import java.time.LocalDateTime
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class AdminRepositoryImpl @Inject constructor(
    private val adminApiService: AdminApiService,
    private val orderApiService: OrderApiService,
    private val productApiService: ProductApiService,
    private val authApiService: AuthApiService,
    private val tokenManager: TokenManager
) : AdminRepository {

    private var currentAdmin: AdminUser? = null

    override suspend fun loginAdmin(username: String, password: String): Result<AdminUser> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ API: $username")
            
            val loginRequest = LoginRequestDto(username, password)
            val apiResult = safeApiCall { authApiService.login(loginRequest) }
            
            if (apiResult.isSuccess) {
                val authResponse = apiResult.getOrNull()
                if (authResponse != null) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
                    tokenManager.saveToken(authResponse.token)
                    
                    // –°–æ–∑–¥–∞–µ–º AdminUser –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                    val adminUser = AdminUser(
                        id = authResponse.userId,
                        username = authResponse.username,
                        email = authResponse.email,
                        firstName = authResponse.firstName,
                        lastName = authResponse.lastName,
                        role = AdminRole.SUPER_ADMIN, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ admin - —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω
                        permissions = AdminPermission.values().toSet(), // –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞
                        isActive = true,
                        lastLoginAt = LocalDateTime.now(),
                        createdAt = LocalDateTime.now()
                    )
                    
                    currentAdmin = adminUser
                    Log.d("AdminRepository", "‚úÖ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${adminUser.username}")
                    Result.success(adminUser)
                } else {
                    Log.e("AdminRepository", "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    Result.failure(Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                }
            } else {
                Log.e("AdminRepository", "‚ùå –û—à–∏–±–∫–∞ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${apiResult.getErrorMessage()}")
                Result.failure(Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Log.e("AdminRepository", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"))
        }
    }

    override suspend fun getCurrentAdmin(): Result<AdminUser?> {
        return Result.success(currentAdmin)
    }

    override suspend fun logoutAdmin(): Result<Unit> {
        Log.d("AdminRepository", "üö™ –í—ã—Ö–æ–¥ –∞–¥–º–∏–Ω–∞: ${currentAdmin?.username}")
        currentAdmin = null
        tokenManager.clearToken()
        return Result.success(Unit)
    }

    override suspend fun getAdminStats(): Result<AdminStats> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞")
            val apiResult = safeApiCall { adminApiService.getAdminStats() }
            
            if (apiResult.isSuccess) {
                val statsDto = apiResult.getOrNull()
                if (statsDto != null) {
                    val stats = statsDto.adminStatsMapperToDomain()
                    Log.d("AdminRepository", "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å API")
                    Result.success(stats)
                } else {
                    Log.e("AdminRepository", "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    Result.failure(Exception("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))
                }
            } else {
                Log.e("AdminRepository", "‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${apiResult.getErrorMessage()}")
                Result.failure(Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Log.e("AdminRepository", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}"))
        }
    }

    override fun getAdminStatsFlow(): Flow<AdminStats> = flow {
        while (true) {
            val result = getAdminStats()
            if (result.isSuccess) {
                result.getOrNull()?.let { emit(it) }
            }
            kotlinx.coroutines.delay(30000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        }
    }

    override suspend fun getAllOrders(page: Int, size: Int): Result<List<Order>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üì¶ –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API")
            
            val allOrders = mutableListOf<Order>()
            var currentPage = 0
            var hasMorePages = true
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            while (hasMorePages) {
                Log.d("AdminRepository", "üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É $currentPage")
                val apiResult = safeApiCall { 
                    orderApiService.getAllOrders(page = currentPage, size = 100) 
                }
                
                if (apiResult.isSuccess) {
                    val adminOrdersPageResponse = apiResult.getOrNull()
                    if (adminOrdersPageResponse != null) {
                        val orders = adminOrdersPageResponse.toDomain()
                        allOrders.addAll(orders)
                        
                        Log.d("AdminRepository", "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ $currentPage: ${orders.size} –∑–∞–∫–∞–∑–æ–≤")
                        
                        hasMorePages = !adminOrdersPageResponse.last && currentPage < (adminOrdersPageResponse.totalPages - 1)
                        currentPage++
                        
                        if (currentPage > 10) {
                            Log.w("AdminRepository", "‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –º–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                            break
                        }
                    } else {
                        hasMorePages = false
                    }
                } else {
                    Log.e("AdminRepository", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã $currentPage: ${apiResult.getErrorMessage()}")
                    if (currentPage == 0) {
                        return@withContext Result.failure(Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã: ${apiResult.getErrorMessage()}"))
                    }
                    hasMorePages = false
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            val sortedOrders = allOrders.sortedByDescending { it.createdAt }
            Log.d("AdminRepository", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${sortedOrders.size}")
            Result.success(sortedOrders)
            
        } catch (e: Exception) {
            Log.e("AdminRepository", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ${e.message}"))
        }
    }

    override suspend fun updateOrderStatus(orderId: Long, status: OrderStatus): Result<Order> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ $orderId –Ω–∞ $status")
            // –ü–æ–∫–∞ Admin API –Ω–µ –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            Result.failure(Exception("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
        } catch (e: Exception) {
            Log.e("AdminRepository", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${e.message}"))
        }
    }

    override fun getAllOrdersFlow(): Flow<List<Order>> = flow {
        while (true) {
            val result = getAllOrders()
            if (result.isSuccess) {
                result.getOrNull()?.let { emit(it) }
            }
            kotlinx.coroutines.delay(10000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        }
    }

    override suspend fun getOrdersByStatus(status: OrderStatus): Result<List<Order>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üìã –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É: $status")
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
            val allOrdersResult = getAllOrders()
            if (allOrdersResult.isSuccess) {
                val filteredOrders = allOrdersResult.getOrNull()?.filter { it.status == status } ?: emptyList()
                Log.d("AdminRepository", "‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º $status: ${filteredOrders.size}")
                Result.success(filteredOrders)
            } else {
                Result.failure(Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã: ${allOrdersResult.exceptionOrNull()?.message}"))
            }
        } catch (e: Exception) {
            Log.e("AdminRepository", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${e.message}"))
        }
    }

    override suspend fun getAllProducts(): Result<List<Product>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üõçÔ∏è –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            val apiResult = safeApiCall { productApiService.getAllProducts() }
            
            if (apiResult.isSuccess) {
                val productsDto = apiResult.getOrNull()
                if (productsDto != null) {
                    val products = productsDto.toProductsDomain()
                    Log.d("AdminRepository", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.size}")
                    Result.success(products)
                } else {
                    Result.failure(Exception("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"))
                }
            } else {
                Result.failure(Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Result.failure(Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${e.message}"))
        }
    }

    override suspend fun getAllCategories(): Result<List<Category>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üìÇ –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            val apiResult = safeApiCall { productApiService.getCategories() }
            
            if (apiResult.isSuccess) {
                val categoriesDto = apiResult.getOrNull()
                if (categoriesDto != null) {
                    val categories = categoriesDto.map { it.categoryMapperToDomain() }
                    Log.d("AdminRepository", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.size}")
                    Result.success(categories)
                } else {
                    Result.failure(Exception("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"))
                }
            } else {
                Result.failure(Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Result.failure(Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${e.message}"))
        }
    }

    override suspend fun createProduct(product: Product): Result<Product> {
        return Result.failure(Exception("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun updateProduct(product: Product): Result<Product> {
        return Result.failure(Exception("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun deleteProduct(productId: Long): Result<Unit> {
        return Result.failure(Exception("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun createCategory(category: Category): Result<Category> {
        return Result.failure(Exception("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun updateCategory(category: Category): Result<Category> {
        return Result.failure(Exception("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun deleteCategory(categoryId: Long): Result<Unit> {
        return Result.failure(Exception("–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun getPopularProducts(limit: Int): Result<List<PopularProduct>> {
        return Result.failure(Exception("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }

    override suspend fun getRecentOrders(limit: Int): Result<List<Order>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("AdminRepository", "üìÖ –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (limit: $limit)")
            val result = getAllOrders(page = 0, size = limit)
            if (result.isSuccess) {
                val orders = result.getOrNull()?.sortedByDescending { it.createdAt }?.take(limit) ?: emptyList()
                Log.d("AdminRepository", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${orders.size}")
                Result.success(orders)
            } else {
                Result.failure(Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã: ${result.exceptionOrNull()?.message}"))
            }
        } catch (e: Exception) {
            Log.e("AdminRepository", "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${e.message}"))
        }
    }

    override suspend fun getRevenueStats(days: Int): Result<Double> {
        return Result.failure(Exception("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - Admin API –Ω–µ –≥–æ—Ç–æ–≤"))
    }
} 