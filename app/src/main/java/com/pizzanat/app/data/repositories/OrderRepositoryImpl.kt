/**
 * @file: OrderRepositoryImpl.kt
 * @description: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 * @dependencies: OrderApiService, OrderRepository
 * @created: 2024-12-19
 */
package com.pizzanat.app.data.repositories

import android.util.Log
import com.pizzanat.app.data.mappers.toDomain
import com.pizzanat.app.data.mappers.createOrderRequest
import com.pizzanat.app.data.remote.api.OrderApiService
import com.pizzanat.app.data.remote.util.safeApiCall
import com.pizzanat.app.data.remote.util.ApiResult
import com.pizzanat.app.domain.entities.*
import com.pizzanat.app.domain.repositories.OrderRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class OrderRepositoryImpl @Inject constructor(
    private val orderApiService: OrderApiService
) : OrderRepository {

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è API
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ –ø–ª—é—Å –≤ –Ω–∞—á–∞–ª–µ
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
     */
    private fun normalizePhoneNumber(phone: String): String {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, —Ç–∏—Ä–µ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
        var normalized = phone.replace(Regex("[^+\\d]"), "")
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
        if (normalized.startsWith("8") && normalized.length == 11) {
            normalized = "+7" + normalized.substring(1)
        }
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –±–µ–∑ –ø–ª—é—Å–∞
        if (normalized.startsWith("7") && normalized.length == 11) {
            normalized = "+$normalized"
        }
        
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã (10 —Ü–∏—Ñ—Ä), –¥–æ–±–∞–≤–ª—è–µ–º +7
        if (normalized.matches(Regex("^\\d{10}$"))) {
            normalized = "+7$normalized"
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (!normalized.matches(Regex("^\\+7\\d{10}$"))) {
            Log.w("OrderRepository", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '$phone' –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∫ '$normalized', –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX")
        }
        
        return normalized
    }

    override fun getUserOrdersFlow(userId: Long): Flow<List<Order>> = flow {
        try {
            val result = getUserOrders(userId)
            if (result.isSuccess) {
                val orders = result.getOrNull() ?: emptyList()
                Log.d("OrderRepository", "getUserOrdersFlow: –í—ã–¥–∞–µ–º ${orders.size} –∑–∞–∫–∞–∑–æ–≤")
                emit(orders)
            } else {
                Log.w("OrderRepository", "getUserOrdersFlow: –û—à–∏–±–∫–∞ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                emit(emptyList())
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "getUserOrdersFlow: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ ${e.message}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            emit(emptyList())
        }
    }

    override suspend fun getUserOrders(userId: Long): Result<List<Order>> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("OrderRepository", "–ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API...")
            
            val apiResult = safeApiCall { orderApiService.getUserOrders() }
            
            Log.d("OrderRepository", "API —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success=${apiResult.isSuccess}")
            
            when (apiResult) {
                is ApiResult.Success -> {
                    val ordersResponse = apiResult.data
                    Log.d("OrderRepository", "API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: $ordersResponse")
                    
                    if (ordersResponse != null) {
                        Log.d("OrderRepository", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤: ${ordersResponse.content.size} –∑–∞–ø–∏—Å–µ–π")
                        ordersResponse.content.forEachIndexed { index, orderDto ->
                            Log.d("OrderRepository", "DTO –ó–∞–∫–∞–∑ $index: ID=${orderDto.id}, —Å—Ç–∞—Ç—É—Å='${orderDto.status}', —Å—É–º–º–∞=${orderDto.totalAmount}")
                            Log.d("OrderRepository", "  –ê–¥—Ä–µ—Å: '${orderDto.deliveryAddress}'")
                            Log.d("OrderRepository", "  –¢–µ–ª–µ—Ñ–æ–Ω: '${orderDto.contactPhone}'")
                            Log.d("OrderRepository", "  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '${orderDto.comment}'")
                            Log.d("OrderRepository", "  –¢–æ–≤–∞—Ä–æ–≤: ${orderDto.items?.size ?: 0}")
                        }
                        
                        val orders = ordersResponse.toDomain()
                        Log.d("OrderRepository", "–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å API: ${orders.size}")
                        orders.forEach { order ->
                            Log.d("OrderRepository", "Domain –ó–∞–∫–∞–∑: ID=${order.id}, —Å—Ç–∞—Ç—É—Å=${order.status}, —Å—É–º–º–∞=${order.totalAmount}‚ÇΩ")
                            Log.d("OrderRepository", "  –ê–¥—Ä–µ—Å: '${order.deliveryAddress}'")
                            Log.d("OrderRepository", "  –¢–µ–ª–µ—Ñ–æ–Ω: '${order.customerPhone}'")
                            Log.d("OrderRepository", "  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '${order.notes}'")
                            Log.d("OrderRepository", "  –î–∞—Ç–∞: ${order.createdAt}")
                            Log.d("OrderRepository", "  –¢–æ–≤–∞—Ä–æ–≤: ${order.items.size}")
                        }
                        Result.success(orders)
                    } else {
                        Log.w("OrderRepository", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        Result.success(emptyList())
                    }
                }
                is ApiResult.Error -> {
                    Log.w("OrderRepository", "–û—à–∏–±–∫–∞ API –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${apiResult.message} (–∫–æ–¥: ${apiResult.code})")
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
                    if (apiResult.code == 401) {
                        Log.e("OrderRepository", "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–µ–∫ JWT —Ç–æ–∫–µ–Ω")
                    }
                    
                    Result.failure(Exception("API Error: ${apiResult.message}"))
                }
                is ApiResult.NetworkError -> {
                    Log.w("OrderRepository", "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: ${apiResult.message}")
                    Result.failure(Exception("Network Error: ${apiResult.message}"))
                }
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${e.message}", e)
            Result.failure(e)
        }
    }

    override suspend fun getOrderById(orderId: Long): Result<Order?> = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d("OrderRepository", "üîç –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–∞ #$orderId —á–µ—Ä–µ–∑ API...")
            
            val apiResult = safeApiCall { orderApiService.getOrderById(orderId) }
            
            Log.d("OrderRepository", "üì° API —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #$orderId: success=${apiResult.isSuccess}")
            
            if (apiResult.isSuccess) {
                val orderDto = apiResult.getOrNull()
                Log.d("OrderRepository", "üì¶ DTO –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω: $orderDto")
                
                if (orderDto != null) {
                    Log.d("OrderRepository", "üìã DTO –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #$orderId:")
                    Log.d("OrderRepository", "  DTO ID: ${orderDto.id}")
                    Log.d("OrderRepository", "  DTO Status: '${orderDto.status}'")
                    Log.d("OrderRepository", "  DTO TotalAmount: ${orderDto.totalAmount}")
                    Log.d("OrderRepository", "  DTO DeliveryFee: ${orderDto.deliveryFee}") 
                    Log.d("OrderRepository", "  DTO ContactName: '${orderDto.contactName}'")
                    Log.d("OrderRepository", "  DTO ContactPhone: '${orderDto.contactPhone}'")
                    Log.d("OrderRepository", "  DTO DeliveryAddress: '${orderDto.deliveryAddress}'")
                    Log.d("OrderRepository", "  DTO DeliveryLocationName: '${orderDto.deliveryLocationName}'")
                    Log.d("OrderRepository", "  DTO Items count: ${orderDto.items?.size ?: 0}")
                    
                    // üîç –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å JSON –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    try {
                        val gson = com.google.gson.Gson()
                        val jsonString = gson.toJson(orderDto)
                        Log.d("OrderRepository", "üìÑ –ü–æ–ª–Ω—ã–π JSON –∑–∞–∫–∞–∑–∞: $jsonString")
                    } catch (e: Exception) {
                        Log.w("OrderRepository", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å DTO –≤ JSON: ${e.message}")
                    }
                    
                    orderDto.items?.forEachIndexed { index, item ->
                        Log.d("OrderRepository", "    DTO Item ${index + 1}: ${item.productName} - ${item.quantity} √ó ${item.price}‚ÇΩ = ${item.subtotal}‚ÇΩ")
                    }
                    
                    Log.d("OrderRepository", "üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ DTO –≤ Domain –æ–±—ä–µ–∫—Ç...")
                    val order = orderDto.toDomain()
                    
                    Log.d("OrderRepository", "‚úÖ Domain –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #$orderId:")
                    Log.d("OrderRepository", "  Domain ID: ${order.id}")
                    Log.d("OrderRepository", "  Domain Status: ${order.status}")
                    Log.d("OrderRepository", "  Domain TotalAmount: ${order.totalAmount}")
                    Log.d("OrderRepository", "  Domain CustomerName: '${order.customerName}'")
                    Log.d("OrderRepository", "  Domain CustomerPhone: '${order.customerPhone}'")
                    Log.d("OrderRepository", "  Domain DeliveryAddress: '${order.deliveryAddress}'")
                    Log.d("OrderRepository", "  Domain Items count: ${order.items.size}")
                    Log.d("OrderRepository", "  Domain GrandTotal: ${order.grandTotal}")
                    
                    order.items.forEachIndexed { index, item ->
                        Log.d("OrderRepository", "    Domain Item ${index + 1}: ${item.productName} - ${item.quantity} √ó ${item.productPrice}‚ÇΩ = ${item.totalPrice}‚ÇΩ")
                    }
                    
                    Result.success(order)
                } else {
                    Log.w("OrderRepository", "‚ö†Ô∏è –ó–∞–∫–∞–∑ #$orderId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API (orderDto = null)")
                    Result.success(null)
                }
            } else {
                val errorMessage = apiResult.getErrorMessage()
                Log.e("OrderRepository", "‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #$orderId: $errorMessage")
                Result.failure(Exception("API Error: $errorMessage"))
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #$orderId: ${e.message}")
            Log.e("OrderRepository", "üí• Stacktrace: ${e.stackTraceToString()}")
            Result.failure(e)
        }
    }

    override suspend fun createOrder(
        userId: Long,
        cartItems: List<CartItem>,
        deliveryAddress: String,
        customerPhone: String,
        customerName: String,
        notes: String,
        paymentMethod: PaymentMethod,
        deliveryMethod: DeliveryMethod
    ): Result<Long> = withContext(Dispatchers.IO) {
        return@withContext try {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ API
            val normalizedPhone = normalizePhoneNumber(customerPhone)
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PaymentMethod –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è API
            val paymentMethodString = when (paymentMethod) {
                PaymentMethod.SBP -> "SBP"
                PaymentMethod.CARD_ON_DELIVERY -> "CASH"
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DeliveryMethod –≤ —Ä—É—Å—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è backend API
            val deliveryTypeString = when (deliveryMethod) {
                DeliveryMethod.DELIVERY -> "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º"
                DeliveryMethod.PICKUP -> "–°–∞–º–æ–≤—ã–≤–æ–∑"
            }
            
            // Backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            val createOrderRequest = createOrderRequest(
                deliveryAddress = deliveryAddress,
                contactName = customerName,
                contactPhone = normalizedPhone,
                comment = notes,
                paymentMethod = paymentMethodString,
                deliveryType = deliveryTypeString
            )
            
            Log.d("OrderRepository", "üì§ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê:")
            Log.d("OrderRepository", "  üìã CreateOrderRequest —Å–æ–¥–µ—Ä–∂–∏—Ç:")
            Log.d("OrderRepository", "    deliveryAddress: '${createOrderRequest.deliveryAddress}'")
            Log.d("OrderRepository", "    contactName: '${createOrderRequest.contactName}'")
            Log.d("OrderRepository", "    contactPhone: '${createOrderRequest.contactPhone}'")
            Log.d("OrderRepository", "    comment: '${createOrderRequest.comment}'")
            Log.d("OrderRepository", "    paymentMethod: '${createOrderRequest.paymentMethod}'")
            Log.d("OrderRepository", "    deliveryType: '${createOrderRequest.deliveryType}' ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û! (—Ä—É—Å—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)")
            
            // üîç –õ–æ–≥–∏—Ä—É–µ–º JSON –∑–∞–ø—Ä–æ—Å–∞
            try {
                val gson = com.google.gson.Gson()
                val jsonRequest = gson.toJson(createOrderRequest)
                Log.d("OrderRepository", "üì§ JSON –∑–∞–ø—Ä–æ—Å–∞ –≤ backend:")
                Log.d("OrderRepository", jsonRequest)
            } catch (e: Exception) {
                Log.w("OrderRepository", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ JSON: ${e.message}")
            }
            
            Log.d("OrderRepository", "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ backend API...")
            
            val apiResult = safeApiCall { orderApiService.createOrder(createOrderRequest) }
            
            Log.d("OrderRepository", "üì° –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ BACKEND:")
            Log.d("OrderRepository", "  success: ${apiResult.isSuccess}")
            
            if (apiResult.isSuccess) {
                val orderDto = apiResult.getOrNull()
                if (orderDto != null) {
                    Log.d("OrderRepository", "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API: ${orderDto.id}")
                    Log.d("OrderRepository", "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–û–ì–û –ó–ê–ö–ê–ó–ê:")
                    Log.d("OrderRepository", "  üìã Backend –≤–µ—Ä–Ω—É–ª OrderDto:")
                    Log.d("OrderRepository", "    id: ${orderDto.id}")
                    Log.d("OrderRepository", "    deliveryAddress: '${orderDto.deliveryAddress}'")
                    Log.d("OrderRepository", "    deliveryFee: ${orderDto.deliveryFee} ‚ÇΩ")
                    Log.d("OrderRepository", "    contactName: '${orderDto.contactName}'")
                    Log.d("OrderRepository", "    contactPhone: '${orderDto.contactPhone}'")
                    
                    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å backend –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å deliveryType!
                    Log.i("OrderRepository", "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π deliveryType: '$deliveryTypeString'")
                    Log.i("OrderRepository", "üìã Backend –ø–æ–ª—É—á–∏–ª –ø–æ–ª–µ 'deliveryType' —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
                    Log.i("OrderRepository", "üîç –û–∂–∏–¥–∞–µ–º –≤ –ë–î: delivery_type='$deliveryTypeString', delivery_cost=${if (deliveryMethod == DeliveryMethod.DELIVERY) "200.0" else "0.0"}")
                    
                    Result.success(orderDto.id)
                } else {
                    Log.w("OrderRepository", "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                    Result.failure(Exception("Empty API response"))
                }
            } else {
                val errorMessage = apiResult.getErrorMessage()
                Log.e("OrderRepository", "‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: $errorMessage")
                Log.e("OrderRepository", "‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                Log.e("OrderRepository", "   1. Backend –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è deliveryType='$deliveryTypeString'")
                Log.e("OrderRepository", "   2. –ü—Ä–æ–±–ª–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ backend")
                Log.e("OrderRepository", "   3. –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                Result.failure(Exception("API Error: $errorMessage"))
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${e.message}")
            Result.failure(e)
        }
    }

    override suspend fun updateOrderStatus(orderId: Long, status: OrderStatus): Result<Unit> = withContext(Dispatchers.IO) {
        return@withContext try {
            val request = com.pizzanat.app.data.remote.dto.UpdateOrderStatusRequest(status.name)
            val apiResult = safeApiCall { orderApiService.updateOrderStatus(orderId, request) }
            
            if (apiResult.isSuccess) {
                Log.d("OrderRepository", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API: $orderId -> $status")
                Result.success(Unit)
            } else {
                Log.w("OrderRepository", "–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${apiResult.getErrorMessage()}")
                Result.failure(Exception("API Error: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${e.message}")
            Result.failure(e)
        }
    }

    override suspend fun getUserOrdersCount(userId: Long): Result<Int> = withContext(Dispatchers.IO) {
        return@withContext try {
            val ordersResult = getUserOrders(userId)
            if (ordersResult.isSuccess) {
                val count = ordersResult.getOrNull()?.size ?: 0
                Result.success(count)
            } else {
                Result.failure(Exception("Failed to get orders"))
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–∫–∞–∑–æ–≤: ${e.message}")
            Result.failure(e)
        }
    }

    override suspend fun getOrdersByStatus(status: OrderStatus): Result<List<Order>> = withContext(Dispatchers.IO) {
        return@withContext try {
            val apiResult = safeApiCall { 
                orderApiService.getAllOrders(status = status.name, page = 0, size = 100) 
            }
            
            if (apiResult.isSuccess) {
                val adminOrdersPageResponse = apiResult.getOrNull()
                if (adminOrdersPageResponse != null) {
                    val orders = adminOrdersPageResponse.toDomain()
                    Log.d("OrderRepository", "–ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É $status –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å API: ${orders.size}")
                    Result.success(orders)
                } else {
                    Result.success(emptyList())
                }
            } else {
                Log.w("OrderRepository", "–û—à–∏–±–∫–∞ API –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É")
                Result.failure(Exception("API Error: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${e.message}")
            Result.failure(e)
        }
    }

    override suspend fun deleteOrder(orderId: Long): Result<Unit> = withContext(Dispatchers.IO) {
        return@withContext try {
            val apiResult = safeApiCall { orderApiService.cancelOrder(orderId) }
            
            if (apiResult.isSuccess) {
                Log.d("OrderRepository", "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ API: $orderId")
                Result.success(Unit)
            } else {
                Log.w("OrderRepository", "–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: ${apiResult.getErrorMessage()}")
                Result.failure(Exception("API Error: ${apiResult.getErrorMessage()}"))
            }
        } catch (e: Exception) {
            Log.e("OrderRepository", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: ${e.message}")
            Result.failure(e)
        }
    }
} 

