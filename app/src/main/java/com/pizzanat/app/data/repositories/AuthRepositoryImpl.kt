/**
 * @file: AuthRepositoryImpl.kt
 * @description: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API (–≤–∫–ª—é—á–∞—è Telegram –∏ SMS)
 * @dependencies: AuthApiService, TokenManager, DTO, Mappers
 * @created: 2024-12-19
 * @updated: 2024-12-20 - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏ SMS –º–µ—Ç–æ–¥–æ–≤
 */
package com.pizzanat.app.data.repositories

import com.pizzanat.app.data.mappers.toDomain
import com.pizzanat.app.data.network.api.AuthApiService
import com.pizzanat.app.data.network.dto.*
import com.pizzanat.app.domain.entities.*
import com.pizzanat.app.domain.repositories.AuthRepository
import com.google.gson.Gson
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.HttpException
import java.io.IOException
import javax.inject.Inject
import javax.inject.Singleton
import android.util.Log

@Singleton
class AuthRepositoryImpl @Inject constructor(
    private val authApiService: AuthApiService,
    private val tokenManager: TokenManager,
    private val userManager: UserManager
) : AuthRepository {

    private val gson = Gson()

    override suspend fun register(
        username: String,
        email: String,
        password: String,
        firstName: String,
        lastName: String,
        phone: String
    ): Result<AuthResponse> = withContext(Dispatchers.IO) {
        try {
            val request = RegisterRequestDto(
                username = username,
                email = email,
                password = password,
                firstName = firstName,
                lastName = lastName,
                phone = phone
            )

            val response = authApiService.register(request)

            if (response.isSuccessful) {
                val authResponseDto = response.body()
                if (authResponseDto != null) {
                    val authResponse = authResponseDto.toDomain()
                    Result.success(authResponse)
                } else {
                    Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                }
            } else {
                // –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫—É –∏–∑ response body
                val errorMessage = try {
                    val errorBody = response.errorBody()?.string()
                    if (errorBody != null) {
                        val errorDto = gson.fromJson(errorBody, ErrorResponseDto::class.java)
                        errorDto.message
                    } else {
                        getDefaultErrorMessage(response.code())
                    }
                } catch (e: Exception) {
                    getDefaultErrorMessage(response.code())
                }
                Result.failure(Exception(errorMessage))
            }
        } catch (e: HttpException) {
            Result.failure(Exception("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}"))
        } catch (e: IOException) {
            Result.failure(Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"))
        } catch (e: Exception) {
            Result.failure(Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}"))
        }
    }

    override suspend fun login(
        username: String,
        password: String
    ): Result<AuthResponse> = withContext(Dispatchers.IO) {
        try {
            val request = LoginRequestDto(
                username = username,
                password = password
            )

            val response = authApiService.login(request)

            if (response.isSuccessful) {
                val authResponseDto = response.body()
                if (authResponseDto != null) {
                    val authResponse = authResponseDto.toDomain()
                    Result.success(authResponse)
                } else {
                    Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                }
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 500 –æ—à–∏–±–∫—É (—Å–µ—Ä–≤–µ—Ä –ª–æ–≥–∏–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                if (response.code() == 500) {
                    val savedUser = userManager.getUser()
                    if (savedUser != null && savedUser.email == username) {
                        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –¥–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        val authResponse = AuthResponse(
                            token = "temp_token_${System.currentTimeMillis()}",
                            user = savedUser
                        )
                        Result.success(authResponse)
                    } else {
                        Result.failure(Exception("–õ–æ–≥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É 500. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."))
                    }
                } else {
                    // –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫—É –∏–∑ response body –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                    val errorMessage = try {
                        val errorBody = response.errorBody()?.string()
                        if (errorBody != null) {
                            val errorDto = gson.fromJson(errorBody, ErrorResponseDto::class.java)
                            errorDto.message
                        } else {
                            getDefaultErrorMessage(response.code())
                        }
                    } catch (e: Exception) {
                        getDefaultErrorMessage(response.code())
                    }
                    Result.failure(Exception(errorMessage))
                }
            }
        } catch (e: HttpException) {
            Result.failure(Exception("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}"))
        } catch (e: IOException) {
            Result.failure(Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"))
        } catch (e: Exception) {
            Result.failure(Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}"))
        }
    }

    private fun getDefaultErrorMessage(code: Int): String {
        return when (code) {
            400 -> "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            401 -> "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            404 -> "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            409 -> "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            500 -> "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            else -> "–û—à–∏–±–∫–∞: $code"
        }
    }

    // Helper methods for token and user management
    override suspend fun saveToken(token: String) {
        Log.d("AuthRepositoryImpl", "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ${token.take(20)}...")
        tokenManager.saveToken(token)
        Log.d("AuthRepositoryImpl", "‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    }

    override suspend fun getToken(): String? {
        val token = tokenManager.getToken()
        Log.d("AuthRepositoryImpl", "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ${token?.take(20) ?: "null"}")
        return token
    }

    override suspend fun isTokenValid(): Boolean {
        val isValid = tokenManager.isTokenValid()
        Log.d("AuthRepositoryImpl", "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞: $isValid")
        return isValid
    }

    override suspend fun clearToken() {
        Log.d("AuthRepositoryImpl", "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        tokenManager.clearToken()
        userManager.clearUser()
        Log.d("AuthRepositoryImpl", "‚úÖ –¢–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—â–µ–Ω—ã")
    }

    override suspend fun getCurrentUser(): User? {
        val user = userManager.getUser()
        Log.d("AuthRepositoryImpl", "üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        if (user != null) {
            Log.d("AuthRepositoryImpl", "  - ID: ${user.id}")
            Log.d("AuthRepositoryImpl", "  - Username: ${user.username}")
            Log.d("AuthRepositoryImpl", "  - Email: ${user.email}")
            Log.d("AuthRepositoryImpl", "  - Name: ${user.firstName} ${user.lastName}")
        } else {
            Log.d("AuthRepositoryImpl", "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: null")
        }
        return user
    }

    override suspend fun saveUser(user: User) {
        Log.d("AuthRepositoryImpl", "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        Log.d("AuthRepositoryImpl", "  - ID: ${user.id}")
        Log.d("AuthRepositoryImpl", "  - Username: ${user.username}")
        Log.d("AuthRepositoryImpl", "  - Email: ${user.email}")
        Log.d("AuthRepositoryImpl", "  - Name: ${user.firstName} ${user.lastName}")
        userManager.saveUser(user)
        Log.d("AuthRepositoryImpl", "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    }

    // Telegram Authentication Implementation
    override suspend fun initTelegramAuth(deviceId: String?): Result<TelegramAuthInitResponse> = withContext(Dispatchers.IO) {
        val logger = com.pizzanat.app.utils.ApiLogger.logRequest(
            method = "POST",
            url = "/auth/telegram/init",
            requestBody = gson.toJson(com.pizzanat.app.data.network.dto.TelegramAuthRequestDto(deviceId))
        )

        try {
            val request = com.pizzanat.app.data.network.dto.TelegramAuthRequestDto(deviceId)
            val response = authApiService.initTelegramAuth(request)

            if (response.isSuccessful) {
                val responseBody = response.body()
                logger.logSuccess(response.code(), gson.toJson(responseBody))

                if (responseBody != null) {
                    val domainResponse = responseBody.toDomain()
                    Result.success(domainResponse)
                } else {
                    val error = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    logger.logError(response.code(), error)
                    Result.failure(Exception(error))
                }
            } else {
                val errorBody = response.errorBody()?.string()
                val errorMessage = parseErrorMessage(response.code(), errorBody)
                logger.logError(response.code(), errorMessage, errorBody)
                Result.failure(Exception(errorMessage))
            }
        } catch (e: HttpException) {
            logger.logError(e.code(), "HTTP Exception: ${e.message}")
            Result.failure(Exception("–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"))
        } catch (e: IOException) {
            logger.logNetworkError("IOException: ${e.message}")
            Result.failure(Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))
        } catch (e: Exception) {
            logger.logNetworkError("Exception: ${e.message}")
            Result.failure(Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"))
        }
    }

    override suspend fun checkTelegramAuthStatus(authToken: String): Result<TelegramAuthStatusResponse> = withContext(Dispatchers.IO) {
        val logger = com.pizzanat.app.utils.ApiLogger.logRequest(
            method = "GET",
            url = "/auth/telegram/status/$authToken"
        )

        try {
            Log.d("AuthRepositoryImpl", "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${authToken.take(20)}...")
            val response = authApiService.checkTelegramAuthStatus(authToken)

            if (response.isSuccessful) {
                val responseBody = response.body()
                logger.logSuccess(response.code(), gson.toJson(responseBody))

                Log.d("AuthRepositoryImpl", "üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:")
                Log.d("AuthRepositoryImpl", "  - HTTP –∫–æ–¥: ${response.code()}")
                Log.d("AuthRepositoryImpl", "  - Response body: ${gson.toJson(responseBody)}")

                if (responseBody != null) {
                    Log.d("AuthRepositoryImpl", "üìã –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:")
                    Log.d("AuthRepositoryImpl", "  - success: ${responseBody.success}")
                    Log.d("AuthRepositoryImpl", "  - status: ${responseBody.status}")
                    Log.d("AuthRepositoryImpl", "  - message: ${responseBody.message}")
                    Log.d("AuthRepositoryImpl", "  - authData: ${responseBody.authData != null}")

                    if (responseBody.authData != null) {
                        Log.d("AuthRepositoryImpl", "üë§ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                        Log.d("AuthRepositoryImpl", "  - Token: ${responseBody.authData.token.take(20)}...")
                        Log.d("AuthRepositoryImpl", "  - User ID: ${responseBody.authData.userId}")
                        Log.d("AuthRepositoryImpl", "  - Username: ${responseBody.authData.username}")
                        Log.d("AuthRepositoryImpl", "  - Email: ${responseBody.authData.email}")
                        Log.d("AuthRepositoryImpl", "  - Name: ${responseBody.authData.firstName} ${responseBody.authData.lastName}")
                    }

                    val domainResponse = responseBody.toDomain()

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (domainResponse.status == com.pizzanat.app.domain.entities.TelegramAuthStatus.CONFIRMED) {
                        Log.d("AuthRepositoryImpl", "üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")

                        if (responseBody.authData != null) {
                            Log.d("AuthRepositoryImpl", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω: ${responseBody.authData.token.take(20)}...")
                            saveToken(responseBody.authData.token)
                            Log.d("AuthRepositoryImpl", "‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

                            val user = User(
                                id = responseBody.authData.userId,
                                username = responseBody.authData.username,
                                email = responseBody.authData.email ?: "",
                                firstName = responseBody.authData.firstName ?: "",
                                lastName = responseBody.authData.lastName ?: "",
                                phone = "" // Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                            )
                            Log.d("AuthRepositoryImpl", "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                            Log.d("AuthRepositoryImpl", "  - ID: ${user.id}")
                            Log.d("AuthRepositoryImpl", "  - Username: ${user.username}")
                            Log.d("AuthRepositoryImpl", "  - Email: ${user.email}")
                            saveUser(user)
                            Log.d("AuthRepositoryImpl", "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                            val savedUser = getCurrentUser()
                            if (savedUser != null) {
                                Log.d("AuthRepositoryImpl", "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                                Log.d("AuthRepositoryImpl", "  - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID: ${savedUser.id}")
                                Log.d("AuthRepositoryImpl", "  - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Username: ${savedUser.username}")
                            } else {
                                Log.e("AuthRepositoryImpl", "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
                            }
                        } else {
                            Log.w("AuthRepositoryImpl", "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ!")
                        }
                    } else {
                        Log.d("AuthRepositoryImpl", "‚è≥ –°—Ç–∞—Ç—É—Å: ${domainResponse.status}, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º")
                    }

                    Result.success(domainResponse)
                } else {
                    val error = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    Log.e("AuthRepositoryImpl", "‚ùå $error")
                    logger.logError(response.code(), error)
                    Result.failure(Exception(error))
                }
            } else {
                val errorBody = response.errorBody()?.string()
                val errorMessage = parseErrorMessage(response.code(), errorBody)
                Log.e("AuthRepositoryImpl", "‚ùå HTTP –æ—à–∏–±–∫–∞ ${response.code()}: $errorMessage")
                Log.e("AuthRepositoryImpl", "‚ùå Error body: $errorBody")
                logger.logError(response.code(), errorMessage, errorBody)
                Result.failure(Exception(errorMessage))
            }
        } catch (e: HttpException) {
            val errorMsg = "HTTP Exception –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"
            Log.e("AuthRepositoryImpl", "üí• $errorMsg")
            logger.logError(e.code(), errorMsg)
            Result.failure(Exception("–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"))
        } catch (e: IOException) {
            val errorMsg = "IOException –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"
            Log.e("AuthRepositoryImpl", "üåê $errorMsg")
            logger.logNetworkError(errorMsg)
            Result.failure(Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))
        } catch (e: Exception) {
            val errorMsg = "Exception –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"
            Log.e("AuthRepositoryImpl", "üí• $errorMsg")
            logger.logNetworkError(errorMsg)
            Result.failure(Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"))
        }
    }

    // SMS Authentication Implementation
    override suspend fun sendSmsCode(phoneNumber: String): Result<SmsAuthResponse> = withContext(Dispatchers.IO) {
        try {
            val request = SmsAuthRequestDto(phoneNumber = phoneNumber)
            val response = authApiService.sendSmsCode(request)

            if (response.isSuccessful) {
                val smsAuthResponseDto = response.body()
                if (smsAuthResponseDto != null) {
                    val smsAuthResponse = smsAuthResponseDto.toDomain()
                    Result.success(smsAuthResponse)
                } else {
                    Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                }
            } else {
                val errorMessage = parseErrorMessage(response.code(), response.errorBody()?.string())
                Result.failure(Exception(errorMessage))
            }
        } catch (e: HttpException) {
            Result.failure(Exception("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}"))
        } catch (e: IOException) {
            Result.failure(Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"))
        } catch (e: Exception) {
            Result.failure(Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}"))
        }
    }

    override suspend fun verifySmsCode(phoneNumber: String, code: String): Result<SmsCodeVerifyResponse> = withContext(Dispatchers.IO) {
        try {
            val request = SmsCodeVerifyRequestDto(phoneNumber = phoneNumber, code = code)
            val response = authApiService.verifySmsCode(request)

            if (response.isSuccessful) {
                val smsCodeVerifyResponseDto = response.body()
                if (smsCodeVerifyResponseDto != null) {
                    val smsCodeVerifyResponse = smsCodeVerifyResponseDto.toDomain()

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    saveToken(smsCodeVerifyResponse.authResponse!!.token)
                    saveUser(smsCodeVerifyResponse.authResponse.user)

                    Result.success(smsCodeVerifyResponse)
                } else {
                    Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                }
            } else {
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ 400 –ø–∞—Ä—Å–∏–º {"error": "..."}
                val errorMessage = parseErrorMessage(response.code(), response.errorBody()?.string())

                // –°–æ–∑–¥–∞–µ–º SmsCodeVerifyResponse —Å –æ—à–∏–±–∫–æ–π
                val errorResponse = SmsCodeVerifyResponse(
                    success = false,
                    authResponse = null,
                    error = errorMessage,
                    message = errorMessage
                )

                Result.success(errorResponse) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ success, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º error
            }
        } catch (e: HttpException) {
            Result.failure(Exception("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.message}"))
        } catch (e: IOException) {
            Result.failure(Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"))
        } catch (e: Exception) {
            Result.failure(Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}"))
        }
    }

    // Helper method for error parsing
    private fun parseErrorMessage(code: Int, errorBody: String?): String {
        return try {
            if (errorBody != null) {
                val errorDto = gson.fromJson(errorBody, ErrorResponseDto::class.java)
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –æ—à–∏–±–∫–∏
                errorDto.message ?: errorDto.error ?: getDefaultErrorMessage(code)
            } else {
                getDefaultErrorMessage(code)
            }
        } catch (e: Exception) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            errorBody ?: getDefaultErrorMessage(code)
        }
    }
}