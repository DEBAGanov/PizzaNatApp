/**
 * @file: AddressRepositoryImpl.kt
 * @description: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏ —á–µ—Ä–µ–∑ Backend API
 * @dependencies: AddressApiService, Mappers
 * @created: 2025-01-23
 */
package com.pizzanat.app.data.repositories

import android.util.Log
import com.pizzanat.app.data.mappers.toDomain
import com.pizzanat.app.data.mappers.toOldDomain
import com.pizzanat.app.data.remote.api.AddressApiService
import com.pizzanat.app.domain.entities.AddressSuggestion
import com.pizzanat.app.domain.entities.SimpleAddressSuggestion
import com.pizzanat.app.domain.entities.AddressValidation
import com.pizzanat.app.domain.entities.DeliveryEstimate
import com.pizzanat.app.domain.repositories.AddressRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.HttpException
import java.io.IOException
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class AddressRepositoryImpl @Inject constructor(
    private val addressApiService: AddressApiService
) : AddressRepository {

    companion object {
        private const val TAG = "AddressRepository"
        private const val MIN_QUERY_LENGTH = 2 // –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –ø–æ —Ç–µ—Å—Ç–∞–º
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
     */
    suspend fun getSimpleAddressSuggestions(
        query: String,
        limit: Int = 10
    ): Result<List<SimpleAddressSuggestion>> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è: '$query' (–ª–∏–º–∏—Ç: $limit)")
            
            if (query.isBlank() || query.length < MIN_QUERY_LENGTH) {
                Log.d(TAG, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: ${query.length} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º $MIN_QUERY_LENGTH)")
                return@withContext Result.success(emptyList())
            }

            val response = addressApiService.getAddressSuggestions(
                query = query.trim(),
                limit = limit
            )

            if (response.isSuccessful) {
                val responseBody = response.body()
                if (responseBody != null) {
                    val suggestions = responseBody.map { it.toDomain() }
                    Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${suggestions.size} –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤")
                    suggestions.forEachIndexed { index, suggestion ->
                        Log.d(TAG, "  $index: ${suggestion.shortAddress}")
                    }
                    Result.success(suggestions)
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    Result.success(emptyList())
                }
            } else {
                val errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: ${response.code()}"
                Log.e(TAG, "‚ùå $errorMessage")
                Result.failure(Exception(errorMessage))
            }
        } catch (e: HttpException) {
            val errorMsg = "HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        } catch (e: IOException) {
            val errorMsg = "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤"
            Log.e(TAG, "üåê $errorMsg")
            Result.failure(Exception(errorMsg))
        } catch (e: Exception) {
            val errorMsg = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        }
    }

    override suspend fun getAddressSuggestions(
        query: String,
        limit: Int
    ): Result<List<AddressSuggestion>> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –¥–ª—è: '$query'")
            
            if (query.isBlank() || query.length < MIN_QUERY_LENGTH) {
                Log.d(TAG, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: ${query.length} —Å–∏–º–≤–æ–ª–æ–≤")
                return@withContext Result.success(emptyList())
            }

            val response = addressApiService.getAddressSuggestions(
                query = query.trim(),
                limit = limit
            )

            if (response.isSuccessful) {
                val responseBody = response.body()
                if (responseBody != null) {
                    val suggestions = responseBody.map { it.toOldDomain() }
                    Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${suggestions.size} –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                    Result.success(suggestions)
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    Result.success(emptyList())
                }
            } else {
                val errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: ${response.code()}"
                Log.e(TAG, "‚ùå $errorMessage")
                Result.failure(Exception(errorMessage))
            }
        } catch (e: Exception) {
            val errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        }
    }

    override suspend fun validateDeliveryAddress(
        address: String
    ): Result<AddressValidation> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞: '$address'")

            val response = addressApiService.validateAddress(address.trim())

            if (response.isSuccessful) {
                val responseBody = response.body()
                if (responseBody != null) {
                    val validation = responseBody.toDomain()
                    Log.d(TAG, "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: isValid=${validation.isValid}")
                    if (validation.message != null) {
                        Log.d(TAG, "  –°–æ–æ–±—â–µ–Ω–∏–µ: ${validation.message}")
                    }
                    Result.success(validation)
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞")
                    Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞"))
                }
            } else {
                val errorMessage = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: ${response.code()}"
                Log.e(TAG, "‚ùå $errorMessage")
                Result.failure(Exception(errorMessage))
            }
        } catch (e: Exception) {
            val errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        }
    }

    override suspend fun getDeliveryEstimate(
        address: String
    ): Result<DeliveryEstimate> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: '$address' (–±–µ–∑ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞)")

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—É–º–º—É 500 —Ä—É–±–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            return@withContext getDeliveryEstimateWithAmount(address, 500.0)
        } catch (e: Exception) {
            val errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ (–∑–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –í–æ–ª–∂—Å–∫)
     */
    suspend fun getDeliveryEstimateWithAmount(
        address: String,
        orderAmount: Double
    ): Result<DeliveryEstimate> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîç –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: '$address', —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: $orderAmount ‚ÇΩ")

            val response = addressApiService.getDeliveryEstimate(
                address = address.trim(),
                orderAmount = orderAmount
            )

            if (response.isSuccessful) {
                val responseBody = response.body()
                if (responseBody != null) {
                    val estimate = responseBody.toDomain()
                    Log.d(TAG, "‚úÖ –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:")
                    Log.d(TAG, "  –ó–æ–Ω–∞: ${estimate.zoneName}")
                    Log.d(TAG, "  –î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞: ${estimate.deliveryAvailable}")
                    Log.d(TAG, "  –°—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate.deliveryCost} ‚ÇΩ")
                    Log.d(TAG, "  –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è: ${estimate.isDeliveryFree}")
                    Log.d(TAG, "  –í—Ä–µ–º—è: ${estimate.estimatedTime}")
                    Result.success(estimate)
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
                    Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏"))
                }
            } else {
                val errorMessage = "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${response.code()}"
                Log.e(TAG, "‚ùå $errorMessage")
                Result.failure(Exception(errorMessage))
            }
        } catch (e: HttpException) {
            val errorMsg = "HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        } catch (e: IOException) {
            val errorMsg = "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏"
            Log.e(TAG, "üåê $errorMsg")
            Result.failure(Exception(errorMsg))
        } catch (e: Exception) {
            val errorMsg = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏: ${e.message}"
            Log.e(TAG, "üí• $errorMsg")
            Result.failure(Exception(errorMsg))
        }
    }
} 