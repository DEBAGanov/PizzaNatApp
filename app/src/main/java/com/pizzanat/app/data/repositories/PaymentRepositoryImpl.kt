/**
 * @file: PaymentRepositoryImpl.kt
 * @description: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –Æ–ö–∞—Å—Å–∞
 * @dependencies: PaymentApiService, PaymentRepository
 * @created: 2025-01-23
 */
package com.pizzanat.app.data.repositories

import android.util.Log
import com.pizzanat.app.data.remote.api.PaymentApiService
import com.pizzanat.app.data.remote.api.ConfirmPaymentRequestDto
import com.pizzanat.app.data.mappers.toDomain
import com.pizzanat.app.data.mappers.toDto
import com.pizzanat.app.domain.entities.PaymentInfo
import com.pizzanat.app.domain.entities.CreatePaymentRequest
import com.pizzanat.app.domain.repositories.PaymentRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class PaymentRepositoryImpl @Inject constructor(
    private val paymentApiService: PaymentApiService
) : PaymentRepository {
    
    companion object {
        private const val TAG = "PaymentRepository"
    }
    
    override suspend fun createPayment(request: CreatePaymentRequest): Result<PaymentInfo> = 
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: ${request.description}")
                Log.d(TAG, "üîÑ –î–∞–Ω–Ω—ã–µ –¥–ª—è DTO: orderId=${request.orderId}, amount=${request.amount}, method=${request.paymentMethod}")
                
                val requestDto = request.toDto()
                Log.d(TAG, "üîÑ DTO –∑–∞–ø—Ä–æ—Å–∞: $requestDto")
                
                val response = paymentApiService.createPayment(requestDto)
                
                if (response.isSuccessful) {
                    val paymentDto = response.body()
                    if (paymentDto != null) {
                        Log.d(TAG, "‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ${paymentDto.id}")
                        Result.success(paymentDto.toDomain())
                    } else {
                        Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
                        Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                    }
                } else {
                    val errorBody = response.errorBody()?.string()
                    val errorMsg = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: HTTP ${response.code()}"
                    Log.e(TAG, "‚ùå $errorMsg")
                    Log.e(TAG, "‚ùå –¢–µ–ª–æ –æ—à–∏–±–∫–∏: $errorBody")
                    Result.failure(Exception("$errorMsg: $errorBody"))
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", e)
                Result.failure(e)
            }
        }
    
    override suspend fun getPayment(paymentId: String): Result<PaymentInfo> = 
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: $paymentId")
                
                val response = paymentApiService.getPayment(paymentId)
                
                if (response.isSuccessful) {
                    val paymentDto = response.body()
                    if (paymentDto != null) {
                        Log.d(TAG, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω: ${paymentDto.id}")
                        Result.success(paymentDto.toDomain())
                    } else {
                        Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
                        Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                    }
                } else {
                    val errorMsg = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${response.code()}"
                    Log.e(TAG, "‚ùå $errorMsg")
                    Result.failure(Exception(errorMsg))
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", e)
                Result.failure(e)
            }
        }
    
    override suspend fun confirmPayment(paymentId: String, paymentToken: String): Result<PaymentInfo> = 
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: $paymentId")
                
                val response = paymentApiService.confirmPayment(
                    paymentId = paymentId,
                    request = ConfirmPaymentRequestDto(paymentToken)
                )
                
                if (response.isSuccessful) {
                    val paymentDto = response.body()
                    if (paymentDto != null) {
                        Log.d(TAG, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${paymentDto.id}")
                        Result.success(paymentDto.toDomain())
                    } else {
                        Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
                        Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                    }
                } else {
                    val errorMsg = "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${response.code()}"
                    Log.e(TAG, "‚ùå $errorMsg")
                    Result.failure(Exception(errorMsg))
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", e)
                Result.failure(e)
            }
        }
    
    override suspend fun cancelPayment(paymentId: String): Result<PaymentInfo> = 
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "‚ùå –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞: $paymentId")
                
                val response = paymentApiService.cancelPayment(paymentId)
                
                if (response.isSuccessful) {
                    val paymentDto = response.body()
                    if (paymentDto != null) {
                        Log.d(TAG, "‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: ${paymentDto.id}")
                        Result.success(paymentDto.toDomain())
                    } else {
                        Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞")
                        Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                    }
                } else {
                    val errorMsg = "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: ${response.code()}"
                    Log.e(TAG, "‚ùå $errorMsg")
                    Result.failure(Exception(errorMsg))
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞", e)
                Result.failure(e)
            }
        }
    
    override suspend fun getOrderPayments(orderId: Long): Result<List<PaymentInfo>> = 
        withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–∫–∞–∑–∞: $orderId")
                
                val response = paymentApiService.getOrderPayments(orderId)
                
                if (response.isSuccessful) {
                    val paymentsDto = response.body()
                    if (paymentsDto != null) {
                        Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${paymentsDto.size}")
                        Result.success(paymentsDto.map { it.toDomain() })
                    } else {
                        Log.e(TAG, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–∫–∞–∑–∞")
                        Result.failure(Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"))
                    }
                } else {
                    val errorMsg = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–∫–∞–∑–∞: ${response.code()}"
                    Log.e(TAG, "‚ùå $errorMsg")
                    Result.failure(Exception(errorMsg))
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–∫–∞–∑–∞", e)
                Result.failure(e)
            }
        }
} 